{
  "address": "0x85588964a87af575629641Deaa54F4D78f6d0CBe",
  "abi": [
    {
      "inputs": [],
      "name": "FactoryCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidModuleAddressToPass",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnequalArrayLengths",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "modules",
          "type": "address[]"
        }
      ],
      "name": "DAOAndModulesCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daoFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "metaFactoryTempRoleIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "daoImplementation",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "accessControlImplementation",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "daoName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "roles",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "rolesAdmins",
              "type": "string[]"
            },
            {
              "internalType": "address[][]",
              "name": "members",
              "type": "address[][]"
            },
            {
              "internalType": "string[]",
              "name": "daoFunctionDescs",
              "type": "string[]"
            },
            {
              "internalType": "string[][]",
              "name": "daoActionRoles",
              "type": "string[][]"
            }
          ],
          "internalType": "struct IDAOFactory.CreateDAOParams",
          "name": "createDAOParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "newContractAddressesToPass",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "addressesReturned",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMetaFactory.ModuleFactoryCallData[]",
          "name": "moduleFactoriesCallData",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "contractIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "string[]",
              "name": "functionDescs",
              "type": "string[]"
            },
            {
              "internalType": "string[][]",
              "name": "roles",
              "type": "string[][]"
            }
          ],
          "internalType": "struct IMetaFactory.ModuleActionData",
          "name": "moduleActionData",
          "type": "tuple"
        },
        {
          "internalType": "uint256[][]",
          "name": "roleModuleMembers",
          "type": "uint256[][]"
        }
      ],
      "name": "createDAOAndModules",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x151d4fa82632b8bc89e1d575e84d2c80d3334646009462f354e5685e727f5eb7",
  "receipt": {
    "to": null,
    "from": "0xADC74eE329a23060d3CB431Be0AB313740c191E7",
    "contractAddress": "0x85588964a87af575629641Deaa54F4D78f6d0CBe",
    "transactionIndex": 88,
    "gasUsed": "1698904",
    "logsBloom": "0x
    "blockHash": "0xb7d8944efba96e9540e5311ce499f19dbca26ba2510850fd92f7a2ec2f93fd4b",
    "transactionHash": "0x151d4fa82632b8bc89e1d575e84d2c80d3334646009462f354e5685e727f5eb7",
    "logs": [],
    "blockNumber": 10464262,
    "cumulativeGasUsed": "20864434",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3ddadc1d7c849ba50fdf1b869807a376",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FactoryCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidModuleAddressToPass\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalArrayLengths\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"}],\"name\":\"DAOAndModulesCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metaFactoryTempRoleIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"daoImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessControlImplementation\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"rolesAdmins\",\"type\":\"string[]\"},{\"internalType\":\"address[][]\",\"name\":\"members\",\"type\":\"address[][]\"},{\"internalType\":\"string[]\",\"name\":\"daoFunctionDescs\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"daoActionRoles\",\"type\":\"string[][]\"}],\"internalType\":\"struct IDAOFactory.CreateDAOParams\",\"name\":\"createDAOParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"newContractAddressesToPass\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"addressesReturned\",\"type\":\"uint256\"}],\"internalType\":\"struct IMetaFactory.ModuleFactoryCallData[]\",\"name\":\"moduleFactoriesCallData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"contractIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"functionDescs\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"roles\",\"type\":\"string[][]\"}],\"internalType\":\"struct IMetaFactory.ModuleActionData\",\"name\":\"moduleActionData\",\"type\":\"tuple\"},{\"internalType\":\"uint256[][]\",\"name\":\"roleModuleMembers\",\"type\":\"uint256[][]\"}],\"name\":\"createDAOAndModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createDAOAndModules(address,uint256,(address,address,string,string[],string[],address[][],string[],string[][]),(address,bytes[],uint256,uint256[],uint256)[],(uint256[],string[],string[][]),uint256[][])\":{\"params\":{\"createDAOParams\":\"The struct of parameters used for creating the DAO and Access Control contracts\",\"daoFactory\":\"The address of the DAO factory\",\"metaFactoryTempRoleIndex\":\"The index of which role specified in createDAOParams should be temporarily given to the MetaFactory\",\"moduleActionData\":\"Struct of functionDescs and roles to setup for each newly created module\",\"moduleFactoriesCallData\":\"The calldata required for each module factory call\",\"roleModuleMembers\":\"Array of which newly created modules should be given each role\"},\"returns\":{\"_0\":\"Array of addresses of the newly created modules\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"An interface ID bytes4 as defined by ERC-165\"},\"returns\":{\"_0\":\"bool Indicates whether the interface is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDAOAndModules(address,uint256,(address,address,string,string[],string[],address[][],string[],string[][]),(address,bytes[],uint256,uint256[],uint256)[],(uint256[],string[],string[][]),uint256[][])\":{\"notice\":\"Creates a DAO, Access Control, and any modules specified\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether a given interface ID is supported\"}},\"notice\":\"A factory contract for deploying DAOs along with any desired modules within one transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaFactory.sol\":\"MetaFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/Governor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/TimersUpgradeable.sol\\\";\\nimport \\\"./IGovernorUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended though various modules.\\n *\\n * This contract is abstract and requires several function to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {getVotes}\\n * - Additionanly, the {votingPeriod} must also be implemented\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, EIP712Upgradeable, IGovernorUpgradeable {\\n    using SafeCastUpgradeable for uint256;\\n    using TimersUpgradeable for TimersUpgradeable.BlockNumber;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n\\n    struct ProposalCore {\\n        TimersUpgradeable.BlockNumber voteStart;\\n        TimersUpgradeable.BlockNumber voteEnd;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n\\n    /**\\n     * @dev Restrict access of functions to the governance executor, which may be the Governor itself or a timelock\\n     * contract, as specified by {_executor}. This generally means that function with this modifier must be voted on and\\n     * executed through the governance protocol.\\n     */\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {name} and {version}\\n     */\\n    function __Governor_init(string memory name_) internal onlyInitializing {\\n        __EIP712_init_unchained(name_, version());\\n        __Governor_init_unchained(name_);\\n    }\\n\\n    function __Governor_init_unchained(string memory name_) internal onlyInitializing {\\n        _name = name_;\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\\n     */\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IGovernorUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-version}.\\n     */\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hashProposal}.\\n     *\\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n     * advance, before the proposal is submitted.\\n     *\\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n     * accross multiple networks. This also means that in order to execute the same operation twice (on the same\\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-state}.\\n     */\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if (snapshot == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        if (snapshot >= block.number) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if (deadline >= block.number) {\\n            return ProposalState.Active;\\n        }\\n\\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalSnapshot}.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart.getDeadline();\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd.getDeadline();\\n    }\\n\\n    /**\\n     * @dev Part of the Governor Bravo's interface: _\\\"The number of votes required in order for a voter to become a proposer\\\"_.\\n     */\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Amount of votes already cast passes the threshold limit.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Is the proposal successful or not.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Register a vote with a given support and voting weight.\\n     *\\n     * Note: Support is generic and can represent various things depending on the voting system used.\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual;\\n\\n    /**\\n     * @dev See {IGovernor-propose}.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        require(\\n            getVotes(msg.sender, block.number - 1) >= proposalThreshold(),\\n            \\\"GovernorCompatibilityBravo: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(proposal.voteStart.isUnset(), \\\"Governor: proposal already exists\\\");\\n\\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\\n        uint64 deadline = snapshot + votingPeriod().toUint64();\\n\\n        proposal.voteStart.setDeadline(snapshot);\\n        proposal.voteEnd.setDeadline(deadline);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-execute}.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Internal execution mechanism. Can be overriden to implement different execution mechanism\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            AddressUpgradeable.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\\n     * canceled to allow distinguishing it from executed proposals.\\n     *\\n     * Emits a {IGovernor-ProposalCanceled} event.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVote}.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReason}.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteBySig}.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSAUpgradeable.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\\n        _countVote(proposalId, account, support, weight);\\n\\n        emit VoteCast(account, proposalId, support, weight, reason);\\n\\n        return weight;\\n    }\\n\\n    /**\\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\\n     */\\n    function relay(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual onlyGovernance {\\n        AddressUpgradeable.functionCallWithValue(target, data, value);\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\\n     * through another contract such as a timelock.\\n     */\\n    function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x12b31461d49b8a1589ef116b3d362314452c9170399df7d008fd48bad44bb1ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorUpgradeable is Initializable, IERC165Upgradeable {\\n    function __IGovernor_init() internal onlyInitializing {\\n    }\\n\\n    function __IGovernor_init_unchained() internal onlyInitializing {\\n    }\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast.\\n     *\\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcbbe2908ebd8339c132372673a2284f0b81c64644166dc15ea7b2ad0be80472e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GovernorUpgradeable.sol\\\";\\nimport \\\"../utils/IVotesUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesUpgradeable is Initializable, GovernorUpgradeable {\\n    IVotesUpgradeable public token;\\n\\n    function __GovernorVotes_init(IVotesUpgradeable tokenAddress) internal onlyInitializing {\\n        __GovernorVotes_init_unchained(tokenAddress);\\n    }\\n\\n    function __GovernorVotes_init_unchained(IVotesUpgradeable tokenAddress) internal onlyInitializing {\\n        token = tokenAddress;\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        return token.getPastVotes(account, blockNumber);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xeaed9ce9b909f1e5926327867017cb2d974edcf6369660ff74a60d9bfd6e3dc7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/TimersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary TimersUpgradeable {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xb5dac0ce830eea037a65d37b83863f6a265668a37893b1ac4c01b77c7cf68e9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb4132c3e4beb76a6c6b8c5931abecfc426bbd120d14f065d0cd1411675e88693\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcec885ecdf113b4265ed0856972d7ff167bfeb3802604b18cbb782bf47ecc4ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x0edeb16b9821ae2b16e9d69c383b38d3ad2fbb3e0c06cf809a0786d96e602551\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetaFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IMetaFactory.sol\\\";\\r\\nimport \\\"./interfaces/IDAOFactory.sol\\\";\\r\\nimport \\\"./interfaces/IDAO.sol\\\";\\r\\nimport \\\"./interfaces/IAccessControl.sol\\\";\\r\\n\\r\\n/// @notice A factory contract for deploying DAOs along with any desired modules within one transaction\\r\\ncontract MetaFactory is IMetaFactory, ERC165 {\\r\\n    /// @notice Creates a DAO, Access Control, and any modules specified\\r\\n    /// @param daoFactory The address of the DAO factory\\r\\n    /// @param metaFactoryTempRoleIndex The index of which role specified in createDAOParams should be temporarily given to the MetaFactory\\r\\n    /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\\r\\n    /// @param moduleFactoriesCallData The calldata required for each module factory call\\r\\n    /// @param moduleActionData Struct of functionDescs and roles to setup for each newly created module\\r\\n    /// @param roleModuleMembers Array of which newly created modules should be given each role\\r\\n    /// @return Array of addresses of the newly created modules\\r\\n    function createDAOAndModules(\\r\\n        address daoFactory,\\r\\n        uint256 metaFactoryTempRoleIndex,\\r\\n        IDAOFactory.CreateDAOParams memory createDAOParams,\\r\\n        ModuleFactoryCallData[] memory moduleFactoriesCallData,\\r\\n        ModuleActionData memory moduleActionData,\\r\\n        uint256[][] memory roleModuleMembers\\r\\n    ) external returns (address[] memory) {\\r\\n        if (\\r\\n            moduleActionData.contractIndexes.length !=\\r\\n            moduleActionData.functionDescs.length ||\\r\\n            moduleActionData.contractIndexes.length !=\\r\\n            moduleActionData.roles.length ||\\r\\n            createDAOParams.roles.length != roleModuleMembers.length\\r\\n        ) {\\r\\n            revert UnequalArrayLengths();\\r\\n        }\\r\\n\\r\\n        uint256 modulesLength = moduleFactoriesCallData.length;\\r\\n\\r\\n        // Get the number of new module addresses to be created\\r\\n        uint256 newContractAddressesLength = 2;\\r\\n        for (uint256 i; i < modulesLength; ) {\\r\\n            newContractAddressesLength += moduleFactoriesCallData[i]\\r\\n                .addressesReturned;\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        address[] memory newContractAddresses = new address[](\\r\\n            newContractAddressesLength\\r\\n        );\\r\\n\\r\\n        // Give this contract a temporary role so it can execute through the DAO\\r\\n        uint256 tempRoleMembersLength = createDAOParams\\r\\n            .members[metaFactoryTempRoleIndex]\\r\\n            .length;\\r\\n        address[] memory tempRoleNewMembers = new address[](\\r\\n            tempRoleMembersLength + 1\\r\\n        );\\r\\n\\r\\n        for (uint256 i; i < tempRoleMembersLength; ) {\\r\\n            tempRoleNewMembers[i] = createDAOParams.members[\\r\\n                metaFactoryTempRoleIndex\\r\\n            ][i];\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        tempRoleNewMembers[tempRoleMembersLength] = address(this);\\r\\n\\r\\n        createDAOParams.members[metaFactoryTempRoleIndex] = tempRoleNewMembers;\\r\\n\\r\\n\\r\\n        // Create the DAO and Access Control contracts\\r\\n        (address dao, address accessControl) = IDAOFactory(daoFactory)\\r\\n            .createDAO(msg.sender, createDAOParams);\\r\\n\\r\\n        newContractAddresses[0] = dao;\\r\\n        newContractAddresses[1] = accessControl;\\r\\n\\r\\n        // Create the DAO modules\\r\\n        newContractAddresses = createModules(newContractAddresses, moduleFactoriesCallData);\\r\\n\\r\\n        addActionsRoles(moduleActionData, newContractAddresses);\\r\\n\\r\\n        addModuleRoles(\\r\\n            createDAOParams.roles,\\r\\n            roleModuleMembers,\\r\\n            newContractAddresses\\r\\n        );\\r\\n\\r\\n        // Renounce the MetaFactory temporary role\\r\\n        IAccessControl(newContractAddresses[1]).renounceRole(\\r\\n            createDAOParams.roles[metaFactoryTempRoleIndex],\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // Create array of created module addresses to emit in event\\r\\n        address[] memory moduleAddresses = new address[](\\r\\n            newContractAddresses.length - 2\\r\\n        );\\r\\n        for (uint256 i; i < moduleAddresses.length; ) {\\r\\n            moduleAddresses[i] = newContractAddresses[i + 2];\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit DAOAndModulesCreated(\\r\\n            newContractAddresses[0],\\r\\n            newContractAddresses[1],\\r\\n            moduleAddresses\\r\\n        );\\r\\n\\r\\n        return newContractAddresses;\\r\\n    }\\r\\n\\r\\n    /// @notice Creates each new module contract\\r\\n    /// @param newContractAddresses The incomplete array of new contract addresses\\r\\n    /// @param moduleFactoriesCallData The calldata required for each module factory call\\r\\n    /// @return The newContractAddresses array updated with new addresses from modules creation\\r\\n    function createModules(\\r\\n        address[] memory newContractAddresses,\\r\\n        ModuleFactoryCallData[] memory moduleFactoriesCallData\\r\\n    ) private returns (address[] memory) {\\r\\n        uint256 newContractAddressIndex = 2;\\r\\n\\r\\n        // Loop through each module to be created\\r\\n        for (uint256 i; i < moduleFactoriesCallData.length;) {\\r\\n            uint256 newContractAddressesToPassLength = moduleFactoriesCallData[\\r\\n                i\\r\\n            ].newContractAddressesToPass.length;\\r\\n\\r\\n            bytes[] memory newData = new bytes[](\\r\\n                moduleFactoriesCallData[i].data.length +\\r\\n                    newContractAddressesToPassLength\\r\\n            );\\r\\n\\r\\n            // Add new contract addresses to module calldata\\r\\n            for (uint256 j; j < newContractAddressesToPassLength;) {\\r\\n                if (\\r\\n                    moduleFactoriesCallData[i].newContractAddressesToPass[j] >=\\r\\n                    i + 2\\r\\n                ) {\\r\\n                    revert InvalidModuleAddressToPass();\\r\\n                }\\r\\n\\r\\n                // Encode the new contract address into bytes\\r\\n                newData[j] = abi.encode(\\r\\n                    newContractAddresses[\\r\\n                        moduleFactoriesCallData[i].newContractAddressesToPass[j]\\r\\n                    ]\\r\\n                );\\r\\n\\r\\n                unchecked {\\r\\n                    j++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Fill in the new bytes array with the old bytes array parameters\\r\\n            for (uint256 j; j < moduleFactoriesCallData[i].data.length; ) {\\r\\n                newData[\\r\\n                    j + newContractAddressesToPassLength\\r\\n                ] = moduleFactoriesCallData[i].data[j];\\r\\n\\r\\n                unchecked {\\r\\n                    j++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Call the module factory with the new calldata\\r\\n            (bool success, bytes memory returnData) = moduleFactoriesCallData[i]\\r\\n                .factory\\r\\n                .call{value: moduleFactoriesCallData[i].value}(\\r\\n                abi.encodeWithSignature(\\\"create(bytes[])\\\", newData)\\r\\n            );\\r\\n\\r\\n            if (!success) {\\r\\n                revert FactoryCallFailed();\\r\\n            }\\r\\n\\r\\n            // Create an array of the returned module addresses\\r\\n            address[] memory newModuleAddresses = new address[](moduleFactoriesCallData[i].addressesReturned);\\r\\n            newModuleAddresses = abi.decode(returnData, (address[]));\\r\\n\\r\\n            // Add the new module addresses to the new contract addresses array\\r\\n            for(uint256 j; j < newModuleAddresses.length;) {\\r\\n              newContractAddresses[newContractAddressIndex] = newModuleAddresses[j];\\r\\n              unchecked {\\r\\n                newContractAddressIndex++;\\r\\n                j++;\\r\\n              }\\r\\n            }\\r\\n           \\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return newContractAddresses;\\r\\n    }\\r\\n\\r\\n    /// @notice Adds the roles and functionDescs for each newly created contract\\r\\n    /// @param moduleActionData Struct of functionDescs and roles to setup for each newly created module\\r\\n    /// @param newContractAddresses The array of new contract addresses\\r\\n    function addActionsRoles(\\r\\n        ModuleActionData memory moduleActionData,\\r\\n        address[] memory newContractAddresses\\r\\n    ) private {\\r\\n        uint256 moduleActionTargetsLength = moduleActionData\\r\\n            .contractIndexes\\r\\n            .length;\\r\\n\\r\\n        // Create address array of modules to be targeted\\r\\n        address[] memory moduleActionTargets = new address[](\\r\\n            moduleActionTargetsLength\\r\\n        );\\r\\n        for (uint256 i; i < moduleActionTargetsLength; ) {\\r\\n            moduleActionTargets[i] = newContractAddresses[\\r\\n                moduleActionData.contractIndexes[i]\\r\\n            ];\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bytes memory data = abi.encodeWithSignature(\\r\\n            \\\"addActionsRoles(address[],string[],string[][])\\\",\\r\\n            moduleActionTargets,\\r\\n            moduleActionData.functionDescs,\\r\\n            moduleActionData.roles\\r\\n        );\\r\\n\\r\\n        address[] memory targetArray = new address[](1);\\r\\n        uint256[] memory valuesArray = new uint256[](1);\\r\\n        bytes[] memory dataArray = new bytes[](1);\\r\\n\\r\\n        // Target array contains just the access control contract address\\r\\n        targetArray[0] = newContractAddresses[1];\\r\\n        valuesArray[0] = 0;\\r\\n        dataArray[0] = data;\\r\\n\\r\\n        // Execute the addActionRoles function on Access Control by calling through the DAO\\r\\n        IDAO(newContractAddresses[0]).execute(\\r\\n            targetArray,\\r\\n            valuesArray,\\r\\n            dataArray\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Grants roles to the modules specified\\r\\n    /// @param roles The array of roles to be granted to modules\\r\\n    /// @param roleModuleMembers Indexes of the modules to be granted each role\\r\\n    /// @param newContractAddresses Array of addresses of the newly created contracts\\r\\n    function addModuleRoles(\\r\\n        string[] memory roles,\\r\\n        uint256[][] memory roleModuleMembers,\\r\\n        address[] memory newContractAddresses\\r\\n    ) private {     \\r\\n        uint256 newMembersLength = roleModuleMembers.length;\\r\\n        address[][] memory newMembers = new address[][](newMembersLength);\\r\\n        for (uint256 i; i < newMembersLength; ) {\\r\\n            uint256 newMembersInnerLength = roleModuleMembers[i].length;\\r\\n            address[] memory newMembersInner = new address[](newMembersInnerLength);\\r\\n            for (uint256 j; j < newMembersInnerLength; ) {\\r\\n                newMembersInner[j] = newContractAddresses[\\r\\n                    roleModuleMembers[i][j]\\r\\n                ];\\r\\n                unchecked {\\r\\n                    j++;\\r\\n                }\\r\\n            }\\r\\n            newMembers[i] = newMembersInner;\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bytes memory data = abi.encodeWithSignature(\\r\\n            \\\"grantRoles(string[],address[][])\\\",\\r\\n            roles,\\r\\n            newMembers\\r\\n        );\\r\\n\\r\\n        address[] memory targetArray = new address[](1);\\r\\n        uint256[] memory valuesArray = new uint256[](1);\\r\\n        bytes[] memory dataArray = new bytes[](1);\\r\\n\\r\\n        targetArray[0] = newContractAddresses[1];\\r\\n        valuesArray[0] = 0;\\r\\n        dataArray[0] = data;\\r\\n\\r\\n        IDAO(newContractAddresses[0]).execute(\\r\\n            targetArray,\\r\\n            valuesArray,\\r\\n            dataArray\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns whether a given interface ID is supported\\r\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\r\\n    /// @return bool Indicates whether the interface is supported\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IMetaFactory).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x20f0869f732acfacd818ebf0d2b05a6a4aca808fd5479286aecbeaea3c68aae8\",\"license\":\"Unlicense\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAccessControl {\\r\\n    struct RoleData {\\r\\n        mapping(address => bool) members;\\r\\n        string adminRole;\\r\\n    }\\r\\n\\r\\n    error UnequalArrayLengths();\\r\\n    error MissingRole(address account, string role);\\r\\n    error OnlySelfRenounce();\\r\\n\\r\\n    event ActionRoleAdded(\\r\\n        address target,\\r\\n        string functionDesc,\\r\\n        bytes4 encodedSig,\\r\\n        string role\\r\\n    );\\r\\n    event ActionRoleRemoved(\\r\\n        address target,\\r\\n        string functionDesc,\\r\\n        bytes4 encodedSig,\\r\\n        string role\\r\\n    );\\r\\n    event RoleAdminChanged(\\r\\n        string role,\\r\\n        string previousAdminRole,\\r\\n        string adminRole\\r\\n    );\\r\\n    event RoleGranted(string role, address account, address admin);\\r\\n    event RoleRevoked(string role, address account, address admin);\\r\\n\\r\\n    /// @notice Initialize DAO action and role permissions\\r\\n    /// @param dao Address to receive DAO role\\r\\n    /// @param roles What permissions are assigned to\\r\\n    /// @param roleAdmins Roles which have the ability to remove or add members\\r\\n    /// @param members Addresses to be granted the specified roles\\r\\n    /// @param targets Contract addresses for actions to be defined on\\r\\n    /// @param functionDescs Function descriptions used to define actions\\r\\n    /// @param actionRoles Roles being granted permission for an action\\r\\n    function initialize(\\r\\n        address dao,\\r\\n        string[] memory roles,\\r\\n        string[] memory roleAdmins,\\r\\n        address[][] memory members,\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory actionRoles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Grants roles to the specified addresses and defines admin roles\\r\\n    /// @param roles The roles being granted\\r\\n    /// @param roleAdmins The roles being granted as admins of the specified of roles\\r\\n    /// @param members Addresses being granted each specified role\\r\\n    function grantRolesAndAdmins(\\r\\n        string[] memory roles,\\r\\n        string[] memory roleAdmins,\\r\\n        address[][] memory members\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Grants roles to the specified addresses\\r\\n    /// @param roles The roles being granted\\r\\n    /// @param members Addresses being granted each specified role\\r\\n    function grantRoles(string[] memory roles, address[][] memory members)\\r\\n        external;\\r\\n\\r\\n    /// @notice Grants a role to the specified address\\r\\n    /// @param role The role being granted\\r\\n    /// @param account The address being granted the specified role\\r\\n    function grantRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Revokes a role from the specified address\\r\\n    /// @param role The role being revoked\\r\\n    /// @param account The address the role is being revoked from\\r\\n    function revokeRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Enables an address to remove one of its own roles\\r\\n    /// @param role The role being renounced\\r\\n    /// @param account The address renouncing the role\\r\\n    function renounceRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Authorizes roles to execute the specified actions\\r\\n    /// @param targets The contract addresses that the action functions are implemented on\\r\\n    /// @param functionDescs The function descriptions used to define the actions\\r\\n    /// @param roles Roles being granted permission for an action\\r\\n    function addActionsRoles(\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory roles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Removes autorization for roles to execute the specified actions\\r\\n    /// @param targets The contract addresses that the action functions are implemented on\\r\\n    /// @param functionDescs The function description used to define the actions\\r\\n    /// @param roles Roles that action permissions are being removed on\\r\\n    function removeActionsRoles(\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory roles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Checks if a caller has the permissions to execute the specific action\\r\\n    /// @param caller Address attempting to execute the action\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param sig The function signature used to define the action\\r\\n    function actionIsAuthorized(\\r\\n        address caller,\\r\\n        address target,\\r\\n        bytes4 sig\\r\\n    ) external view returns (bool isAuthorized);\\r\\n\\r\\n    /// @notice Returns the roles autorized to execute the specified action\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param functionDesc The function description used to define the action\\r\\n    function getActionRoles(address target, string memory functionDesc)\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory roles);\\r\\n\\r\\n    /// @notice Checks if a specific role is authorized for an action\\r\\n    /// @param role Role that authorization is being checked on\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param functionDesc Function description used to define the action\\r\\n    /// @return isAuthorized Indicates whether the role is authorized to execute the action\\r\\n    function isRoleAuthorized(\\r\\n        string calldata role,\\r\\n        address target,\\r\\n        string memory functionDesc\\r\\n    ) external view returns (bool isAuthorized);\\r\\n\\r\\n    /// @notice Returns whether the account has been granted the role\\r\\n    /// @param role Role that authorization is being checked on\\r\\n    /// @param account Address that the role authorization is being check on\\r\\n    /// @return boolean Indicates whether the address has been granted the role\\r\\n    function hasRole(string memory role, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /// @notice Returns the role that is the admin of the specified role\\r\\n    /// @param role Role that the admin role is being returned for\\r\\n    /// @return string The admin role of the specified role\\r\\n    function getRoleAdmin(string memory role)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    /// @return string The string \\\"DAO_ROLE\\\"\\r\\n    function DAO_ROLE() external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xae2952dc66a42acbef4a2f9955ca8c0bcfa2b61da963ab76f9bc1aa6835b14c5\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDAO.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDAO {\\r\\n    error Unauthorized(bytes32 role, address account);\\r\\n    error UnequalArrayLengths();\\r\\n\\r\\n    event Executed(address[] targets, uint256[] values, bytes[] calldatas);\\r\\n\\r\\n    /// @notice Function for initializing the Dao\\r\\n    /// @param _accessControl The address of the access control contract\\r\\n    /// @param _name Name of the Dao\\r\\n    function initialize(address _accessControl, string calldata _name) external;\\r\\n\\r\\n    /// @notice A function for executing function calls from the DAO\\r\\n    /// @param targets An array of addresses to target for the function calls\\r\\n    /// @param values An array of ether values to send with the function calls\\r\\n    /// @param calldatas An array of bytes defining the function calls\\r\\n    function execute(\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata calldatas\\r\\n    ) external;\\r\\n\\r\\n    /// @return string The string \\\"Name\\\"\\r\\n    function name() external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x5133d9121093a6a569dc592855448dededd2dfae1e638b651511504e243d1d6b\",\"license\":\"Unlicense\"},\"contracts/interfaces/IDAOFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDAOFactory {\\r\\n    struct CreateDAOParams {\\r\\n        address daoImplementation;\\r\\n        address accessControlImplementation;\\r\\n        string daoName;\\r\\n        string[] roles;\\r\\n        string[] rolesAdmins;\\r\\n        address[][] members;\\r\\n        string[] daoFunctionDescs;\\r\\n        string[][] daoActionRoles;\\r\\n    }\\r\\n\\r\\n    event DAOCreated(address indexed daoAddress, address indexed accessControl, address indexed sender, address creator);\\r\\n\\r\\n    /// @notice Creates a DAO with an access control contract\\r\\n    /// @param creator Address of the Dao Creator\\r\\n    /// @param createDAOParams Struct of all the parameters required to create a DAO\\r\\n    /// @return dao The address of the deployed DAO proxy contract\\r\\n    /// @return accessControl The address of the deployed access control proxy contract\\r\\n    function createDAO(address creator, CreateDAOParams calldata createDAOParams)\\r\\n        external\\r\\n        returns (address, address);\\r\\n}\\r\\n\",\"keccak256\":\"0x9bd653a57d2150c13c62e6f977bdefacf8fcfa5b0899e8ee5a47a9953eacbfee\",\"license\":\"Unlicense\"},\"contracts/interfaces/IGovTimelockUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/// @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\r\\n/// delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\r\\n/// {Governor} needs to be authorized within the Access Control Contract in order to execute transactions on the TimelockController.\\r\\n/// Using this model means the proposal will be operated by the MVD.\\r\\nabstract contract IGovTimelockUpgradeable is\\r\\n    Initializable,\\r\\n    IGovernorUpgradeable\\r\\n{\\r\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\r\\n    /// @dev Public accessor to check the address of the timelock\\r\\n    function timelock() public view virtual returns (address);\\r\\n\\r\\n    /// @dev Public accessor to check the eta of a queued proposal\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function proposalEta(uint256 proposalId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Function to queue a proposal to the timelock.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function queue(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) public virtual returns (uint256 proposalId);\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x8dc6a3e20a9f6d979fa15976552b63b696cc7b9437038f98be2d36f7093dd061\",\"license\":\"Unlicense\"},\"contracts/interfaces/IGovernorModule.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.2;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol\\\";\\r\\nimport \\\"../modules/Governor/GovTimelockUpgradeable.sol\\\";\\r\\n\\r\\n/// @dev Governor Module used to implement 1 token 1 vote.\\r\\n/// This acts as an extension of the MVD and permissions are controlled by access control.\\r\\n/// @dev Gov Module is extended by the timelock contract which creates a lockup period before execution.\\r\\ninterface IGovernorModule {\\r\\n    /// @dev Configures Gov Module implementation\\r\\n    /// @dev Called once during deployment atomically\\r\\n    /// @param _name Name of the DAO\\r\\n    /// @param _token Voting token uses snapshot feature\\r\\n    /// @param _timelock Timelock vest proposals to allow detractors to exit system\\r\\n    /// @param _initialVoteExtension Allow users to vote if quorum attack is preformed\\r\\n    /// @param _initialVotingDelay Allow users to research proposals before voting period\\r\\n    /// @param _initialVotingPeriod Length of voting period (blocks)\\r\\n    /// @param _initialProposalThreshold Total tokens required to submit a proposal\\r\\n    /// @param _initialQuorumNumeratorValue Total votes needed to reach quorum\\r\\n    /// @param _accessControl Address of Access Control\\r\\n\\r\\n\\r\\n    function initialize(\\r\\n        string memory _name,\\r\\n        IVotesUpgradeable _token,\\r\\n        ITimelockUpgradeable _timelock,\\r\\n        uint64 _initialVoteExtension,\\r\\n        uint256 _initialVotingDelay,\\r\\n        uint256 _initialVotingPeriod,\\r\\n        uint256 _initialProposalThreshold,\\r\\n        uint256 _initialQuorumNumeratorValue,\\r\\n        address _accessControl\\r\\n    ) external;\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    enum ProposalState {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Canceled,\\r\\n        Defeated,\\r\\n        Succeeded,\\r\\n        Queued,\\r\\n        Expired,\\r\\n        Executed\\r\\n    }\\r\\n\\r\\n    /// @notice module:user-config\\r\\n    /// @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\r\\n    /// leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\r\\n    function votingDelay() external view returns (uint256);\\r\\n\\r\\n    /// @notice module:user-config\\r\\n    /// @dev Delay, in number of blocks, between the vote start and vote ends.\\r\\n    /// NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\r\\n    /// duration compared to the voting delay.\\r\\n    function votingPeriod() external view returns (uint256);\\r\\n\\r\\n    /// @notice module:user-config\\r\\n    /// @dev Minimum number of cast voted required for a proposal to be successful.\\r\\n    /// Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\r\\n    /// quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\r\\n    /// @param blockNumber Checkpoint at this blockNumber\\r\\n    function quorum(uint256 blockNumber) external view returns (uint256);\\r\\n\\r\\n    /// @notice module:reputation\\r\\n    /// @dev Voting power of an `account` at a specific `blockNumber`.\\r\\n    /// Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\r\\n    /// multiple), {ERC20Votes} tokens.\\r\\n    /// @param account Voting weight of this Address\\r\\n    /// @param blockNumber Checkpoint at this blockNumber\\r\\n    function getVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function state(uint256 proposalId) external view returns (ProposalState);\\r\\n\\r\\n    /// @notice module:core\\r\\n    /// @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\r\\n    /// during this block.\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function proposalDeadline(uint256 proposalId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\r\\n    /// {IGovernor-votingPeriod} blocks after the voting starts.\\r\\n    /// Emits a {ProposalCreated} event.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params\\r\\n    /// @param description Description of proposal\\r\\n    function propose(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        string memory description\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @dev Total vote weight required to create a proposal\\r\\n    function proposalThreshold() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x723a0970ce4380fce65cca203e9496b8dc22716986179995de8421d623556246\",\"license\":\"Unlicense\"},\"contracts/interfaces/IMetaFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IGovernorModule.sol\\\";\\r\\nimport \\\"./IDAOFactory.sol\\\";\\r\\n\\r\\ninterface IMetaFactory {\\r\\n    event DAOAndModulesCreated(\\r\\n        address dao,\\r\\n        address accessControl,\\r\\n        address[] modules\\r\\n    );\\r\\n\\r\\n    error UnequalArrayLengths();\\r\\n    error InvalidModuleAddressToPass();\\r\\n    error FactoryCallFailed();\\r\\n\\r\\n    struct ModuleFactoryCallData {\\r\\n        address factory;\\r\\n        bytes[] data;\\r\\n        uint256 value;\\r\\n        uint256[] newContractAddressesToPass;\\r\\n        uint256 addressesReturned;\\r\\n    }\\r\\n\\r\\n    struct ModuleActionData {\\r\\n        uint256[] contractIndexes;\\r\\n        string[] functionDescs;\\r\\n        string[][] roles;\\r\\n    }\\r\\n\\r\\n    /// @notice A factory contract for deploying DAOs along with any desired modules within one transaction\\r\\n    /// @param daoFactory The address of the DAO factory\\r\\n    /// @param metaFactoryTempRoleIndex The index of which role specified in createDAOParams should be temporarily given to the MetaFactory\\r\\n    /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\\r\\n    /// @param moduleFactoriesCallData The calldata required for each module factory call\\r\\n    /// @param moduleActionData Struct of functionDescs and roles to setup for each newly created module\\r\\n    /// @param roleModuleMembers Array of which newly created modules should be given each role\\r\\n    /// @return Array of addresses of the newly created modules\\r\\n    function createDAOAndModules(\\r\\n        address daoFactory,\\r\\n        uint256 metaFactoryTempRoleIndex,\\r\\n        IDAOFactory.CreateDAOParams memory createDAOParams,\\r\\n        ModuleFactoryCallData[] memory moduleFactoriesCallData,\\r\\n        ModuleActionData memory moduleActionData,\\r\\n        uint256[][] memory roleModuleMembers\\r\\n    ) external returns (address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xf7727568aeef8a5ad4a25fdb599459d347389839b7e3657613120f4337efd473\",\"license\":\"Unlicense\"},\"contracts/interfaces/ITimelockUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITimelockUpgradeable {\\r\\n    /// @dev Emitted when a call is scheduled as part of operation `id`.\\r\\n    event CallScheduled(\\r\\n        bytes32 indexed id,\\r\\n        uint256 indexed index,\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        bytes data,\\r\\n        bytes32 predecessor,\\r\\n        uint256 delay\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when a call is performed as part of operation `id`.\\r\\n    event CallExecuted(\\r\\n        bytes32 indexed id,\\r\\n        uint256 indexed index,\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        bytes data\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when operation `id` is cancelled.\\r\\n    event Cancelled(bytes32 indexed id);\\r\\n\\r\\n    /// @dev Emitted when the minimum delay for future operations is modified.\\r\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\r\\n\\r\\n    /// @dev Contract might receive/hold ETH as part of the maintenance process.\\r\\n    receive() external payable;\\r\\n\\r\\n    /// @notice Function for initializing the contract that can only be called once\\r\\n    /// @param _accessControl The address of the access control contract\\r\\n    /// @param _dao The address of the dao contract\\r\\n    /// @param _minDelay init the contract with a given `minDelay`.\\r\\n    function initialize(\\r\\n        address _accessControl,\\r\\n        address _dao,\\r\\n        uint256 _minDelay\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Changes the minimum timelock duration for future operations.\\r\\n    /// Emits a {MinDelayChange} event.\\r\\n    /// Requirements:\\r\\n    /// - the caller must be authorized.\\r\\n    /// @param newDelay Update the delay between queue and execute\\r\\n    function updateDelay(uint256 newDelay) external;\\r\\n\\r\\n    /// @dev Schedule an operation containing a batch of transactions.\\r\\n    /// Emits one {CallScheduled} event per transaction in the batch.\\r\\n    /// - the caller must be authorized.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param datas Function Sigs w/ Params \\r\\n    /// @param predecessor GovTimelock passes this as 0\\r\\n    /// @param salt Description Hash\\r\\n    /// @param delay current delay set in contract\\r\\n    function scheduleBatch(\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata datas,\\r\\n        bytes32 predecessor,\\r\\n        bytes32 salt,\\r\\n        uint256 delay\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Cancel an operation.\\r\\n    /// - the caller must be authorized.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function cancel(bytes32 id) external;\\r\\n\\r\\n    /// @dev Execute an (ready) operation containing a batch of transactions.\\r\\n    /// Emits one {CallExecuted} event per transaction in the batch.\\r\\n    /// - the caller must be authorized\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param datas Function Sigs w/ Params \\r\\n    /// @param predecessor GovTimelock passes this as 0\\r\\n    /// @param salt Description Hash\\r\\n    function executeBatch(\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata datas,\\r\\n        bytes32 predecessor,\\r\\n        bytes32 salt\\r\\n    ) external payable;\\r\\n\\r\\n    /// @dev Returns whether an id correspond to a registered operation. This\\r\\n    /// includes both Pending, Ready and Done operations.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function isOperation(bytes32 id) external view returns (bool pending);\\r\\n\\r\\n    /// @dev Returns whether an operation is pending or not.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function isOperationPending(bytes32 id)\\r\\n        external\\r\\n        view\\r\\n        returns (bool pending);\\r\\n\\r\\n    /// @dev Returns whether an operation is ready or not.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function isOperationReady(bytes32 id) external view returns (bool ready);\\r\\n\\r\\n    /// @dev Returns whether an operation is done or not.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function isOperationDone(bytes32 id) external view returns (bool done);\\r\\n\\r\\n    /// @dev Returns the timestamp at with an operation becomes ready (0 for\\r\\n    /// unset operations, 1 for done operations).\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function getTimestamp(bytes32 id) external view returns (uint256 timestamp);\\r\\n\\r\\n    /// @dev Returns the minimum delay for an operation to become valid.\\r\\n    /// This value can be changed by executing an operation that calls `updateDelay`.\\r\\n    function getMinDelay() external view returns (uint256 duration);\\r\\n\\r\\n    /// @dev Returns the identifier of an operation containing a batch of\\r\\n    /// transactions.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param datas Function Sigs w/ Params \\r\\n    /// @param predecessor GovTimelock passes this as 0\\r\\n    /// @param salt Description Hash\\r\\n    function hashOperationBatch(\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata datas,\\r\\n        bytes32 predecessor,\\r\\n        bytes32 salt\\r\\n    ) external pure returns (bytes32 hash);\\r\\n}\\r\\n\",\"keccak256\":\"0xd68208695c85a33f6c9b1629b21794933f00a73352ce8473c6e412321a41bf78\",\"license\":\"Unlicense\"},\"contracts/modules/Governor/GovTimelockUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorTimelockControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol\\\";\\r\\nimport \\\"../../interfaces/IGovTimelockUpgradeable.sol\\\";\\r\\nimport \\\"../../interfaces/ITimelockUpgradeable.sol\\\";\\r\\n\\r\\n/// @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\r\\n/// delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\r\\n/// {Governor} needs to be authorized within the Access Control Contract in order to execute transactions on the TimelockController.\\r\\n/// Using this model means the proposal will be operated by the MVD.\\r\\nabstract contract GovTimelockUpgradeable is\\r\\n    Initializable,\\r\\n    IGovTimelockUpgradeable,\\r\\n    GovernorUpgradeable\\r\\n{\\r\\n    ITimelockUpgradeable private _timelock;\\r\\n    mapping(uint256 => bytes32) private _timelockIds;\\r\\n\\r\\n    /// @dev Emitted when the timelock controller used for proposal execution is modified.\\r\\n    event TimelockChange(address oldTimelock, address newTimelock);\\r\\n\\r\\n    /// @dev Set the timelock.\\r\\n    /// @param timelockAddress Address of the Timelock contract.\\r\\n    function __GovTimelock_init(ITimelockUpgradeable timelockAddress)\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        __GovTimelock_init_unchained(timelockAddress);\\r\\n    }\\r\\n\\r\\n    function __GovTimelock_init_unchained(ITimelockUpgradeable timelockAddress)\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        _updateTimelock(timelockAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev See {IERC165-supportsInterface}.\\r\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\r\\n    /// @return bool Indicates whether the interface is supported\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(IERC165Upgradeable, GovernorUpgradeable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IGovTimelockUpgradeable).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function state(uint256 proposalId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(IGovernorUpgradeable, GovernorUpgradeable)\\r\\n        returns (ProposalState)\\r\\n    {\\r\\n        ProposalState status = super.state(proposalId);\\r\\n\\r\\n        if (status != ProposalState.Succeeded) {\\r\\n            return status;\\r\\n        }\\r\\n\\r\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\r\\n        bytes32 queueid = _timelockIds[proposalId];\\r\\n        if (queueid == bytes32(0)) {\\r\\n            return status;\\r\\n        } else if (_timelock.isOperationDone(queueid)) {\\r\\n            return ProposalState.Executed;\\r\\n        } else if (_timelock.isOperationPending(queueid)) {\\r\\n            return ProposalState.Queued;\\r\\n        } else {\\r\\n            return ProposalState.Canceled;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Public accessor to check the address of the timelock\\r\\n    function timelock() public view virtual override returns (address) {\\r\\n        return address(_timelock);\\r\\n    }\\r\\n\\r\\n    /// @dev Public accessor to check the eta of a queued proposal\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function proposalEta(uint256 proposalId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\r\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\r\\n    }\\r\\n\\r\\n    /// @dev Function to queue a proposal to the timelock.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function queue(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) public virtual override returns (uint256) {\\r\\n        uint256 proposalId = hashProposal(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            descriptionHash\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            state(proposalId) == ProposalState.Succeeded,\\r\\n            \\\"Governor: proposal not successful\\\"\\r\\n        );\\r\\n\\r\\n        uint256 delay = _timelock.getMinDelay();\\r\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            0,\\r\\n            descriptionHash\\r\\n        );\\r\\n        _timelock.scheduleBatch(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            0,\\r\\n            descriptionHash,\\r\\n            delay\\r\\n        );\\r\\n\\r\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\r\\n\\r\\n        return proposalId;\\r\\n    }\\r\\n\\r\\n    /// @dev Overriden execute function that run the already queued proposal through the timelock.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function _execute(\\r\\n        uint256, /* proposalId */\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) internal virtual override {\\r\\n        _timelock.executeBatch{value: msg.value}(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            0,\\r\\n            descriptionHash\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\r\\n    /// been queued.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function _cancel(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) internal virtual override returns (uint256) {\\r\\n        uint256 proposalId = super._cancel(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            descriptionHash\\r\\n        );\\r\\n\\r\\n        if (_timelockIds[proposalId] != 0) {\\r\\n            _timelock.cancel(_timelockIds[proposalId]);\\r\\n            delete _timelockIds[proposalId];\\r\\n        }\\r\\n\\r\\n        return proposalId;\\r\\n    }\\r\\n\\r\\n    /// @dev Address through which the governor executes action. In this case, the timelock.\\r\\n    function _executor() internal view virtual override returns (address) {\\r\\n        return address(_timelock);\\r\\n    }\\r\\n\\r\\n    /// @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\r\\n    /// must be proposed, scheduled, and executed through governance proposals.\\r\\n    /// CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\\r\\n    /// @param newTimelock Address of new Timelock Address\\r\\n    function updateTimelock(ITimelockUpgradeable newTimelock)\\r\\n        external\\r\\n        virtual\\r\\n        onlyGovernance\\r\\n    {\\r\\n        _updateTimelock(newTimelock);\\r\\n    }\\r\\n\\r\\n    function _updateTimelock(ITimelockUpgradeable newTimelock) private {\\r\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\r\\n        _timelock = newTimelock;\\r\\n    }\\r\\n\\r\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\r\\n    /// variables without shifting down storage in the inheritance chain.\\r\\n    /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n    uint256[48] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x959ffc162fc27eef1bd677e3c154df941e2f60fb1cbd5f967c789752397c4308\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611dc5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780633fd0822e14610063575b600080fd5b61004e610049366004610fa3565b610083565b60405190151581526020015b60405180910390f35b61007661007136600461176f565b6100ba565b60405161005a9190611878565b60006001600160e01b03198216631fe8411760e11b14806100b457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6020820151518251516060911415806100da575060408301515183515114155b806100eb5750815185606001515114155b15610109576040516311e86f7360e01b815260040160405180910390fd5b8351600260005b8281101561014b5786818151811061012a5761012a61188b565b6020026020010151608001518261014191906118b7565b9150600101610110565b506000816001600160401b0381111561016657610166610ffc565b60405190808252806020026020018201604052801561018f578160200160208202803683370190505b50905060008860a001518a815181106101aa576101aa61188b565b602002602001015151905060008160016101c491906118b7565b6001600160401b038111156101db576101db610ffc565b604051908082528060200260200182016040528015610204578160200160208202803683370190505b50905060005b8281101561027b578a60a001518c815181106102285761022861188b565b602002602001015181815181106102415761024161188b565b602002602001015182828151811061025b5761025b61188b565b6001600160a01b039092166020928302919091019091015260010161020a565b503081838151811061028f5761028f61188b565b60200260200101906001600160a01b031690816001600160a01b031681525050808a60a001518c815181106102c6576102c661188b565b60200260200101819052506000808d6001600160a01b0316639f065e81338e6040518363ffffffff1660e01b8152600401610302929190611a4d565b60408051808303816000875af1158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190611b4f565b91509150818560008151811061035c5761035c61188b565b60200260200101906001600160a01b031690816001600160a01b03168152505080856001815181106103905761039061188b565b60200260200101906001600160a01b031690816001600160a01b0316815250506103ba858c6105a4565b94506103c68a866109d3565b6103d58c606001518a87610c64565b846001815181106103e8576103e861188b565b60200260200101516001600160a01b031663a1e6ab9f8d606001518f815181106104145761041461188b565b6020026020010151306040518363ffffffff1660e01b815260040161043a929190611b89565b600060405180830381600087803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b5050505060006002865161047c9190611bb3565b6001600160401b0381111561049357610493610ffc565b6040519080825280602002602001820160405280156104bc578160200160208202803683370190505b50905060005b815181101561052157866104d78260026118b7565b815181106104e7576104e761188b565b60200260200101518282815181106105015761050161188b565b6001600160a01b03909216602092830291909101909101526001016104c2565b507f64f3ddfe41c125867960880cd7a6e05e253a18137a283f8598cda84184fc2521866000815181106105565761055661188b565b6020026020010151876001815181106105715761057161188b565b60200260200101518360405161058993929190611bca565b60405180910390a150939d9c50505050505050505050505050565b6060600260005b83518110156109ca5760008482815181106105c8576105c861188b565b6020026020010151606001515190506000818684815181106105ec576105ec61188b565b6020026020010151602001515161060391906118b7565b6001600160401b0381111561061a5761061a610ffc565b60405190808252806020026020018201604052801561064d57816020015b60608152602001906001900390816106385790505b50905060005b8281101561075e576106668460026118b7565b8785815181106106785761067861188b565b60200260200101516060015182815181106106955761069561188b565b6020026020010151106106bb5760405163025fe3cd60e21b815260040160405180910390fd5b878785815181106106ce576106ce61188b565b60200260200101516060015182815181106106eb576106eb61188b565b6020026020010151815181106107035761070361188b565b602002602001015160405160200161072a91906001600160a01b0391909116815260200190565b60405160208183030381529060405282828151811061074b5761074b61188b565b6020908102919091010152600101610653565b5060005b8684815181106107745761077461188b565b602002602001015160200151518110156107ef5786848151811061079a5761079a61188b565b60200260200101516020015181815181106107b7576107b761188b565b60200260200101518284836107cc91906118b7565b815181106107dc576107dc61188b565b6020908102919091010152600101610762565b506000808785815181106108055761080561188b565b6020026020010151600001516001600160a01b031688868151811061082c5761082c61188b565b602002602001015160400151846040516024016108499190611bff565b60408051601f198184030181529181526020820180516001600160e01b0316631959b87360e31b1790525161087e9190611c12565b60006040518083038185875af1925050503d80600081146108bb576040519150601f19603f3d011682016040523d82523d6000602084013e6108c0565b606091505b5091509150816108e357604051637141390560e11b815260040160405180910390fd5b60008886815181106108f7576108f761188b565b6020026020010151608001516001600160401b0381111561091a5761091a610ffc565b604051908082528060200260200182016040528015610943578160200160208202803683370190505b5090508180602001905181019061095a9190611c2e565b905060005b81518110156109b85781818151811061097a5761097a61188b565b60200260200101518b89815181106109945761099461188b565b6001600160a01b03909216602092830291909101909101526001978801970161095f565b5050600190940193506105ab92505050565b50929392505050565b8151516000816001600160401b038111156109f0576109f0610ffc565b604051908082528060200260200182016040528015610a19578160200160208202803683370190505b50905060005b82811015610a90578385600001518281518110610a3e57610a3e61188b565b602002602001015181518110610a5657610a5661188b565b6020026020010151828281518110610a7057610a7061188b565b6001600160a01b0390921660209283029190910190910152600101610a1f565b5060008185602001518660400151604051602401610ab093929190611cc7565b60408051601f19818403018152918152602080830180516001600160e01b03166334e7dc6560e11b1790528151600180825281840190935292935060009291908281019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b6060815260200190600190039081610b3957905050905086600181518110610b6357610b6361188b565b602002602001015183600081518110610b7e57610b7e61188b565b60200260200101906001600160a01b031690816001600160a01b031681525050600082600081518110610bb357610bb361188b565b6020026020010181815250508381600081518110610bd357610bd361188b565b602002602001018190525086600081518110610bf157610bf161188b565b60200260200101516001600160a01b031663a516a5bf8484846040518463ffffffff1660e01b8152600401610c2893929190611d00565b600060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050505050505050505050565b81516000816001600160401b03811115610c8057610c80610ffc565b604051908082528060200260200182016040528015610cb357816020015b6060815260200190600190039081610c9e5790505b50905060005b82811015610dd8576000858281518110610cd557610cd561188b565b60200260200101515190506000816001600160401b03811115610cfa57610cfa610ffc565b604051908082528060200260200182016040528015610d23578160200160208202803683370190505b50905060005b82811015610daf5786888581518110610d4457610d4461188b565b60200260200101518281518110610d5d57610d5d61188b565b602002602001015181518110610d7557610d7561188b565b6020026020010151828281518110610d8f57610d8f61188b565b6001600160a01b0390921660209283029190910190910152600101610d29565b5080848481518110610dc357610dc361188b565b60209081029190910101525050600101610cb9565b5060008582604051602401610dee929190611d6a565b60408051601f19818403018152918152602080830180516001600160e01b0316632359caf960e01b1790528151600180825281840190935292935060009291908281019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b6060815260200190600190039081610e7757905050905086600181518110610ea157610ea161188b565b602002602001015183600081518110610ebc57610ebc61188b565b60200260200101906001600160a01b031690816001600160a01b031681525050600082600081518110610ef157610ef161188b565b6020026020010181815250508381600081518110610f1157610f1161188b565b602002602001018190525086600081518110610f2f57610f2f61188b565b60200260200101516001600160a01b031663a516a5bf8484846040518463ffffffff1660e01b8152600401610f6693929190611d00565b600060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b50505050505050505050505050565b600060208284031215610fb557600080fd5b81356001600160e01b031981168114610fcd57600080fd5b9392505050565b6001600160a01b0381168114610fe957600080fd5b50565b8035610ff781610fd4565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b038111828210171561103557611035610ffc565b60405290565b60405160a081016001600160401b038111828210171561103557611035610ffc565b604051601f8201601f191681016001600160401b038111828210171561108557611085610ffc565b604052919050565b60006001600160401b038311156110a6576110a6610ffc565b6110b9601f8401601f191660200161105d565b90508281528383830111156110cd57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126110f557600080fd5b610fcd8383356020850161108d565b60006001600160401b0382111561111d5761111d610ffc565b5060051b60200190565b600082601f83011261113857600080fd5b8135602061114d61114883611104565b61105d565b82815260059290921b8401810191818101908684111561116c57600080fd5b8286015b848110156111ab5780356001600160401b0381111561118f5760008081fd5b61119d8986838b01016110e4565b845250918301918301611170565b509695505050505050565b600082601f8301126111c757600080fd5b813560206111d761114883611104565b828152600592831b85018201928282019190878511156111f657600080fd5b8387015b858110156112955780356001600160401b038111156112195760008081fd5b8801603f81018a1361122b5760008081fd5b85810135604061123d61114883611104565b82815291851b8301810191888101908d84111561125a5760008081fd5b938201935b83851015611284578435925061127483610fd4565b828252938901939089019061125f565b8852505050938501935084016111fa565b5090979650505050505050565b600082601f8301126112b357600080fd5b813560206112c361114883611104565b82815260059290921b840181019181810190868411156112e257600080fd5b8286015b848110156111ab5780356001600160401b038111156113055760008081fd5b6113138986838b0101611127565b8452509183019183016112e6565b6000610100828403121561133457600080fd5b61133c611012565b905061134782610fec565b815261135560208301610fec565b602082015260408201356001600160401b038082111561137457600080fd5b611380858386016110e4565b6040840152606084013591508082111561139957600080fd5b6113a585838601611127565b606084015260808401359150808211156113be57600080fd5b6113ca85838601611127565b608084015260a08401359150808211156113e357600080fd5b6113ef858386016111b6565b60a084015260c084013591508082111561140857600080fd5b61141485838601611127565b60c084015260e084013591508082111561142d57600080fd5b5061143a848285016112a2565b60e08301525092915050565b600082601f83011261145757600080fd5b8135602061146761114883611104565b82815260059290921b8401810191818101908684111561148657600080fd5b8286015b848110156111ab578035835291830191830161148a565b600082601f8301126114b257600080fd5b6114bf6111488335611104565b82358082526020808301929160051b850101858111156114de57600080fd5b602085015b81811015611637576001600160401b03808235111561150157600080fd5b8135870160a0818a03601f1901121561151957600080fd5b61152161103b565b61152e6020830135610fd4565b60208201358152826040830135111561154657600080fd5b604082013582018a603f82011261155c57600080fd5b61156c6111486020830135611104565b602082810135808352908201919060051b83016040018d81111561158f57600080fd5b604084015b818110156115e05787813511156115aa57600080fd5b8e605f8235870101126115bc57600080fd5b6115d28f8235870160408101359060600161108d565b845260209384019301611594565b50506020840152505060608201356040820152608082013583101561160457600080fd5b6116178a60206080850135850101611446565b606082015260a091909101356080820152855250602093840193016114e3565b509095945050505050565b60006060828403121561165457600080fd5b604051606081016001600160401b03828210818311171561167757611677610ffc565b81604052829350843591508082111561168f57600080fd5b61169b86838701611446565b835260208501359150808211156116b157600080fd5b6116bd86838701611127565b602084015260408501359150808211156116d657600080fd5b506116e3858286016112a2565b6040830152505092915050565b600082601f83011261170157600080fd5b8135602061171161114883611104565b82815260059290921b8401810191818101908684111561173057600080fd5b8286015b848110156111ab5780356001600160401b038111156117535760008081fd5b6117618986838b0101611446565b845250918301918301611734565b60008060008060008060c0878903121561178857600080fd5b61179187610fec565b95506020870135945060408701356001600160401b03808211156117b457600080fd5b6117c08a838b01611321565b955060608901359150808211156117d657600080fd5b6117e28a838b016114a1565b945060808901359150808211156117f857600080fd5b6118048a838b01611642565b935060a089013591508082111561181a57600080fd5b5061182789828a016116f0565b9150509295509295509295565b600081518084526020808501945080840160005b8381101561186d5781516001600160a01b031687529582019590820190600101611848565b509495945050505050565b602081526000610fcd6020830184611834565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156118ca576118ca6118a1565b500190565b60005b838110156118ea5781810151838201526020016118d2565b838111156118f9576000848401525b50505050565b600081518084526119178160208601602086016118cf565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156119735782840389526119618483516118ff565b98850198935090840190600101611949565b5091979650505050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156119f7578385038a52825180518087529087019087870190845b818110156119e25783516001600160a01b0316835292890192918901916001016119bd565b50509a87019a9550509185019160010161199f565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611973578284038952611a3b84835161192b565b98850198935090840190600101611a23565b6001600160a01b03831681526040602082018190528251611a78918301906001600160a01b03169052565b60006020830151611a9460608401826001600160a01b03169052565b506040830151610100806080850152611ab16101408501836118ff565b91506060850151603f19808685030160a0870152611acf848361192b565b935060808701519150808685030160c0870152611aec848361192b565b935060a08701519150808685030160e0870152611b098483611980565b935060c08701519150808685030183870152611b25848361192b565b935060e0870151925080868503016101208701525050611b458282611a05565b9695505050505050565b60008060408385031215611b6257600080fd5b8251611b6d81610fd4565b6020840151909250611b7e81610fd4565b809150509250929050565b604081526000611b9c60408301856118ff565b905060018060a01b03831660208301529392505050565b600082821015611bc557611bc56118a1565b500390565b6001600160a01b03848116825283166020820152606060408201819052600090611bf690830184611834565b95945050505050565b602081526000610fcd602083018461192b565b60008251611c248184602087016118cf565b9190910192915050565b60006020808385031215611c4157600080fd5b82516001600160401b03811115611c5757600080fd5b8301601f81018513611c6857600080fd5b8051611c7661114882611104565b81815260059190911b82018301908381019087831115611c9557600080fd5b928401925b82841015611cbc578351611cad81610fd4565b82529284019290840190611c9a565b979650505050505050565b606081526000611cda6060830186611834565b8281036020840152611cec818661192b565b90508281036040840152611b458185611a05565b606081526000611d136060830186611834565b82810360208481019190915285518083528682019282019060005b81811015611d4a57845183529383019391830191600101611d2e565b50508481036040860152611d5e818761192b565b98975050505050505050565b604081526000611d7d604083018561192b565b8281036020840152611bf6818561198056fea26469706673582212206da257bcd1e0f59cb96779957d9aae60f7b6fefcedd69e961281ee880cbeb26b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780633fd0822e14610063575b600080fd5b61004e610049366004610fa3565b610083565b60405190151581526020015b60405180910390f35b61007661007136600461176f565b6100ba565b60405161005a9190611878565b60006001600160e01b03198216631fe8411760e11b14806100b457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6020820151518251516060911415806100da575060408301515183515114155b806100eb5750815185606001515114155b15610109576040516311e86f7360e01b815260040160405180910390fd5b8351600260005b8281101561014b5786818151811061012a5761012a61188b565b6020026020010151608001518261014191906118b7565b9150600101610110565b506000816001600160401b0381111561016657610166610ffc565b60405190808252806020026020018201604052801561018f578160200160208202803683370190505b50905060008860a001518a815181106101aa576101aa61188b565b602002602001015151905060008160016101c491906118b7565b6001600160401b038111156101db576101db610ffc565b604051908082528060200260200182016040528015610204578160200160208202803683370190505b50905060005b8281101561027b578a60a001518c815181106102285761022861188b565b602002602001015181815181106102415761024161188b565b602002602001015182828151811061025b5761025b61188b565b6001600160a01b039092166020928302919091019091015260010161020a565b503081838151811061028f5761028f61188b565b60200260200101906001600160a01b031690816001600160a01b031681525050808a60a001518c815181106102c6576102c661188b565b60200260200101819052506000808d6001600160a01b0316639f065e81338e6040518363ffffffff1660e01b8152600401610302929190611a4d565b60408051808303816000875af1158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190611b4f565b91509150818560008151811061035c5761035c61188b565b60200260200101906001600160a01b031690816001600160a01b03168152505080856001815181106103905761039061188b565b60200260200101906001600160a01b031690816001600160a01b0316815250506103ba858c6105a4565b94506103c68a866109d3565b6103d58c606001518a87610c64565b846001815181106103e8576103e861188b565b60200260200101516001600160a01b031663a1e6ab9f8d606001518f815181106104145761041461188b565b6020026020010151306040518363ffffffff1660e01b815260040161043a929190611b89565b600060405180830381600087803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b5050505060006002865161047c9190611bb3565b6001600160401b0381111561049357610493610ffc565b6040519080825280602002602001820160405280156104bc578160200160208202803683370190505b50905060005b815181101561052157866104d78260026118b7565b815181106104e7576104e761188b565b60200260200101518282815181106105015761050161188b565b6001600160a01b03909216602092830291909101909101526001016104c2565b507f64f3ddfe41c125867960880cd7a6e05e253a18137a283f8598cda84184fc2521866000815181106105565761055661188b565b6020026020010151876001815181106105715761057161188b565b60200260200101518360405161058993929190611bca565b60405180910390a150939d9c50505050505050505050505050565b6060600260005b83518110156109ca5760008482815181106105c8576105c861188b565b6020026020010151606001515190506000818684815181106105ec576105ec61188b565b6020026020010151602001515161060391906118b7565b6001600160401b0381111561061a5761061a610ffc565b60405190808252806020026020018201604052801561064d57816020015b60608152602001906001900390816106385790505b50905060005b8281101561075e576106668460026118b7565b8785815181106106785761067861188b565b60200260200101516060015182815181106106955761069561188b565b6020026020010151106106bb5760405163025fe3cd60e21b815260040160405180910390fd5b878785815181106106ce576106ce61188b565b60200260200101516060015182815181106106eb576106eb61188b565b6020026020010151815181106107035761070361188b565b602002602001015160405160200161072a91906001600160a01b0391909116815260200190565b60405160208183030381529060405282828151811061074b5761074b61188b565b6020908102919091010152600101610653565b5060005b8684815181106107745761077461188b565b602002602001015160200151518110156107ef5786848151811061079a5761079a61188b565b60200260200101516020015181815181106107b7576107b761188b565b60200260200101518284836107cc91906118b7565b815181106107dc576107dc61188b565b6020908102919091010152600101610762565b506000808785815181106108055761080561188b565b6020026020010151600001516001600160a01b031688868151811061082c5761082c61188b565b602002602001015160400151846040516024016108499190611bff565b60408051601f198184030181529181526020820180516001600160e01b0316631959b87360e31b1790525161087e9190611c12565b60006040518083038185875af1925050503d80600081146108bb576040519150601f19603f3d011682016040523d82523d6000602084013e6108c0565b606091505b5091509150816108e357604051637141390560e11b815260040160405180910390fd5b60008886815181106108f7576108f761188b565b6020026020010151608001516001600160401b0381111561091a5761091a610ffc565b604051908082528060200260200182016040528015610943578160200160208202803683370190505b5090508180602001905181019061095a9190611c2e565b905060005b81518110156109b85781818151811061097a5761097a61188b565b60200260200101518b89815181106109945761099461188b565b6001600160a01b03909216602092830291909101909101526001978801970161095f565b5050600190940193506105ab92505050565b50929392505050565b8151516000816001600160401b038111156109f0576109f0610ffc565b604051908082528060200260200182016040528015610a19578160200160208202803683370190505b50905060005b82811015610a90578385600001518281518110610a3e57610a3e61188b565b602002602001015181518110610a5657610a5661188b565b6020026020010151828281518110610a7057610a7061188b565b6001600160a01b0390921660209283029190910190910152600101610a1f565b5060008185602001518660400151604051602401610ab093929190611cc7565b60408051601f19818403018152918152602080830180516001600160e01b03166334e7dc6560e11b1790528151600180825281840190935292935060009291908281019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b6060815260200190600190039081610b3957905050905086600181518110610b6357610b6361188b565b602002602001015183600081518110610b7e57610b7e61188b565b60200260200101906001600160a01b031690816001600160a01b031681525050600082600081518110610bb357610bb361188b565b6020026020010181815250508381600081518110610bd357610bd361188b565b602002602001018190525086600081518110610bf157610bf161188b565b60200260200101516001600160a01b031663a516a5bf8484846040518463ffffffff1660e01b8152600401610c2893929190611d00565b600060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050505050505050505050565b81516000816001600160401b03811115610c8057610c80610ffc565b604051908082528060200260200182016040528015610cb357816020015b6060815260200190600190039081610c9e5790505b50905060005b82811015610dd8576000858281518110610cd557610cd561188b565b60200260200101515190506000816001600160401b03811115610cfa57610cfa610ffc565b604051908082528060200260200182016040528015610d23578160200160208202803683370190505b50905060005b82811015610daf5786888581518110610d4457610d4461188b565b60200260200101518281518110610d5d57610d5d61188b565b602002602001015181518110610d7557610d7561188b565b6020026020010151828281518110610d8f57610d8f61188b565b6001600160a01b0390921660209283029190910190910152600101610d29565b5080848481518110610dc357610dc361188b565b60209081029190910101525050600101610cb9565b5060008582604051602401610dee929190611d6a565b60408051601f19818403018152918152602080830180516001600160e01b0316632359caf960e01b1790528151600180825281840190935292935060009291908281019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b6060815260200190600190039081610e7757905050905086600181518110610ea157610ea161188b565b602002602001015183600081518110610ebc57610ebc61188b565b60200260200101906001600160a01b031690816001600160a01b031681525050600082600081518110610ef157610ef161188b565b6020026020010181815250508381600081518110610f1157610f1161188b565b602002602001018190525086600081518110610f2f57610f2f61188b565b60200260200101516001600160a01b031663a516a5bf8484846040518463ffffffff1660e01b8152600401610f6693929190611d00565b600060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b50505050505050505050505050565b600060208284031215610fb557600080fd5b81356001600160e01b031981168114610fcd57600080fd5b9392505050565b6001600160a01b0381168114610fe957600080fd5b50565b8035610ff781610fd4565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b038111828210171561103557611035610ffc565b60405290565b60405160a081016001600160401b038111828210171561103557611035610ffc565b604051601f8201601f191681016001600160401b038111828210171561108557611085610ffc565b604052919050565b60006001600160401b038311156110a6576110a6610ffc565b6110b9601f8401601f191660200161105d565b90508281528383830111156110cd57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126110f557600080fd5b610fcd8383356020850161108d565b60006001600160401b0382111561111d5761111d610ffc565b5060051b60200190565b600082601f83011261113857600080fd5b8135602061114d61114883611104565b61105d565b82815260059290921b8401810191818101908684111561116c57600080fd5b8286015b848110156111ab5780356001600160401b0381111561118f5760008081fd5b61119d8986838b01016110e4565b845250918301918301611170565b509695505050505050565b600082601f8301126111c757600080fd5b813560206111d761114883611104565b828152600592831b85018201928282019190878511156111f657600080fd5b8387015b858110156112955780356001600160401b038111156112195760008081fd5b8801603f81018a1361122b5760008081fd5b85810135604061123d61114883611104565b82815291851b8301810191888101908d84111561125a5760008081fd5b938201935b83851015611284578435925061127483610fd4565b828252938901939089019061125f565b8852505050938501935084016111fa565b5090979650505050505050565b600082601f8301126112b357600080fd5b813560206112c361114883611104565b82815260059290921b840181019181810190868411156112e257600080fd5b8286015b848110156111ab5780356001600160401b038111156113055760008081fd5b6113138986838b0101611127565b8452509183019183016112e6565b6000610100828403121561133457600080fd5b61133c611012565b905061134782610fec565b815261135560208301610fec565b602082015260408201356001600160401b038082111561137457600080fd5b611380858386016110e4565b6040840152606084013591508082111561139957600080fd5b6113a585838601611127565b606084015260808401359150808211156113be57600080fd5b6113ca85838601611127565b608084015260a08401359150808211156113e357600080fd5b6113ef858386016111b6565b60a084015260c084013591508082111561140857600080fd5b61141485838601611127565b60c084015260e084013591508082111561142d57600080fd5b5061143a848285016112a2565b60e08301525092915050565b600082601f83011261145757600080fd5b8135602061146761114883611104565b82815260059290921b8401810191818101908684111561148657600080fd5b8286015b848110156111ab578035835291830191830161148a565b600082601f8301126114b257600080fd5b6114bf6111488335611104565b82358082526020808301929160051b850101858111156114de57600080fd5b602085015b81811015611637576001600160401b03808235111561150157600080fd5b8135870160a0818a03601f1901121561151957600080fd5b61152161103b565b61152e6020830135610fd4565b60208201358152826040830135111561154657600080fd5b604082013582018a603f82011261155c57600080fd5b61156c6111486020830135611104565b602082810135808352908201919060051b83016040018d81111561158f57600080fd5b604084015b818110156115e05787813511156115aa57600080fd5b8e605f8235870101126115bc57600080fd5b6115d28f8235870160408101359060600161108d565b845260209384019301611594565b50506020840152505060608201356040820152608082013583101561160457600080fd5b6116178a60206080850135850101611446565b606082015260a091909101356080820152855250602093840193016114e3565b509095945050505050565b60006060828403121561165457600080fd5b604051606081016001600160401b03828210818311171561167757611677610ffc565b81604052829350843591508082111561168f57600080fd5b61169b86838701611446565b835260208501359150808211156116b157600080fd5b6116bd86838701611127565b602084015260408501359150808211156116d657600080fd5b506116e3858286016112a2565b6040830152505092915050565b600082601f83011261170157600080fd5b8135602061171161114883611104565b82815260059290921b8401810191818101908684111561173057600080fd5b8286015b848110156111ab5780356001600160401b038111156117535760008081fd5b6117618986838b0101611446565b845250918301918301611734565b60008060008060008060c0878903121561178857600080fd5b61179187610fec565b95506020870135945060408701356001600160401b03808211156117b457600080fd5b6117c08a838b01611321565b955060608901359150808211156117d657600080fd5b6117e28a838b016114a1565b945060808901359150808211156117f857600080fd5b6118048a838b01611642565b935060a089013591508082111561181a57600080fd5b5061182789828a016116f0565b9150509295509295509295565b600081518084526020808501945080840160005b8381101561186d5781516001600160a01b031687529582019590820190600101611848565b509495945050505050565b602081526000610fcd6020830184611834565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156118ca576118ca6118a1565b500190565b60005b838110156118ea5781810151838201526020016118d2565b838111156118f9576000848401525b50505050565b600081518084526119178160208601602086016118cf565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156119735782840389526119618483516118ff565b98850198935090840190600101611949565b5091979650505050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156119f7578385038a52825180518087529087019087870190845b818110156119e25783516001600160a01b0316835292890192918901916001016119bd565b50509a87019a9550509185019160010161199f565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611973578284038952611a3b84835161192b565b98850198935090840190600101611a23565b6001600160a01b03831681526040602082018190528251611a78918301906001600160a01b03169052565b60006020830151611a9460608401826001600160a01b03169052565b506040830151610100806080850152611ab16101408501836118ff565b91506060850151603f19808685030160a0870152611acf848361192b565b935060808701519150808685030160c0870152611aec848361192b565b935060a08701519150808685030160e0870152611b098483611980565b935060c08701519150808685030183870152611b25848361192b565b935060e0870151925080868503016101208701525050611b458282611a05565b9695505050505050565b60008060408385031215611b6257600080fd5b8251611b6d81610fd4565b6020840151909250611b7e81610fd4565b809150509250929050565b604081526000611b9c60408301856118ff565b905060018060a01b03831660208301529392505050565b600082821015611bc557611bc56118a1565b500390565b6001600160a01b03848116825283166020820152606060408201819052600090611bf690830184611834565b95945050505050565b602081526000610fcd602083018461192b565b60008251611c248184602087016118cf565b9190910192915050565b60006020808385031215611c4157600080fd5b82516001600160401b03811115611c5757600080fd5b8301601f81018513611c6857600080fd5b8051611c7661114882611104565b81815260059190911b82018301908381019087831115611c9557600080fd5b928401925b82841015611cbc578351611cad81610fd4565b82529284019290840190611c9a565b979650505050505050565b606081526000611cda6060830186611834565b8281036020840152611cec818661192b565b90508281036040840152611b458185611a05565b606081526000611d136060830186611834565b82810360208481019190915285518083528682019282019060005b81811015611d4a57845183529383019391830191600101611d2e565b50508481036040860152611d5e818761192b565b98975050505050505050565b604081526000611d7d604083018561192b565b8281036020840152611bf6818561198056fea26469706673582212206da257bcd1e0f59cb96779957d9aae60f7b6fefcedd69e961281ee880cbeb26b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createDAOAndModules(address,uint256,(address,address,string,string[],string[],address[][],string[],string[][]),(address,bytes[],uint256,uint256[],uint256)[],(uint256[],string[],string[][]),uint256[][])": {
        "params": {
          "createDAOParams": "The struct of parameters used for creating the DAO and Access Control contracts",
          "daoFactory": "The address of the DAO factory",
          "metaFactoryTempRoleIndex": "The index of which role specified in createDAOParams should be temporarily given to the MetaFactory",
          "moduleActionData": "Struct of functionDescs and roles to setup for each newly created module",
          "moduleFactoriesCallData": "The calldata required for each module factory call",
          "roleModuleMembers": "Array of which newly created modules should be given each role"
        },
        "returns": {
          "_0": "Array of addresses of the newly created modules"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "An interface ID bytes4 as defined by ERC-165"
        },
        "returns": {
          "_0": "bool Indicates whether the interface is supported"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDAOAndModules(address,uint256,(address,address,string,string[],string[],address[][],string[],string[][]),(address,bytes[],uint256,uint256[],uint256)[],(uint256[],string[],string[][]),uint256[][])": {
        "notice": "Creates a DAO, Access Control, and any modules specified"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns whether a given interface ID is supported"
      }
    },
    "notice": "A factory contract for deploying DAOs along with any desired modules within one transaction",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}