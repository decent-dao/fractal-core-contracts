{
  "address": "0x4AD54a9A9479cB0e73313e6c7de9f850D2744A28",
  "abi": [
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldVoteExtension",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newVoteExtension",
          "type": "uint64"
        }
      ],
      "name": "LateQuorumVoteExtensionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "extendedDeadline",
          "type": "uint64"
        }
      ],
      "name": "ProposalExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProposalThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldQuorumNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newQuorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "QuorumNumeratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTimelock",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTimelock",
          "type": "address"
        }
      ],
      "name": "TimelockChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingDelay",
          "type": "uint256"
        }
      ],
      "name": "VotingDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "VotingPeriodSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COUNTING_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControl",
      "outputs": [
        {
          "internalType": "contract IAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        }
      ],
      "name": "castVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "castVoteWithReason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "hashProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "contract IVotesUpgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract ITimelockUpgradeable",
          "name": "_timelock",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_initialVoteExtension",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_initialVotingDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialVotingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialProposalThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialQuorumNumeratorValue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_accessControl",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lateQuorumVoteExtension",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalEta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "relay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newVoteExtension",
          "type": "uint64"
        }
      ],
      "name": "setLateQuorumVoteExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "setProposalThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingDelay",
          "type": "uint256"
        }
      ],
      "name": "setVotingDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "setVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IGovernorUpgradeable.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IVotesUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "updateQuorumNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITimelockUpgradeable",
          "name": "newTimelock",
          "type": "address"
        }
      ],
      "name": "updateTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x257c0ed91a91ce156d8d3dcf1eb1640fa19e00335fd6b35d1516baa8c8bd8a2c",
  "receipt": {
    "to": null,
    "from": "0xADC74eE329a23060d3CB431Be0AB313740c191E7",
    "contractAddress": "0x4AD54a9A9479cB0e73313e6c7de9f850D2744A28",
    "transactionIndex": 0,
    "gasUsed": "3416622",
    "logsBloom": "0x
    "blockHash": "0x1dc020592840e0d3595e81288ca80930ab5a6af5389a5560589bec2b095ea02f",
    "transactionHash": "0x257c0ed91a91ce156d8d3dcf1eb1640fa19e00335fd6b35d1516baa8c8bd8a2c",
    "logs": [],
    "blockNumber": 30886266,
    "cumulativeGasUsed": "3416622",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3ddadc1d7c849ba50fdf1b869807a376",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldVoteExtension\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newVoteExtension\",\"type\":\"uint64\"}],\"name\":\"LateQuorumVoteExtensionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"extendedDeadline\",\"type\":\"uint64\"}],\"name\":\"ProposalExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"QuorumNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTimelock\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COUNTING_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"hashProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract IVotesUpgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract ITimelockUpgradeable\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_initialVoteExtension\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_initialVotingDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialVotingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialProposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialQuorumNumeratorValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_accessControl\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lateQuorumVoteExtension\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalEta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newVoteExtension\",\"type\":\"uint64\"}],\"name\":\"setLateQuorumVoteExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"setVotingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IGovernorUpgradeable.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IVotesUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"updateQuorumNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITimelockUpgradeable\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"updateTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Governor Module used to implement 1 token 1 vote. This acts as an extension of the MVD and permissions are controlled by access control.Gov Module is extended by the timelock contract which creates a lockup period before execution.\",\"kind\":\"dev\",\"methods\":{\"COUNTING_MODE()\":{\"details\":\"See {IGovernor-COUNTING_MODE}.\"},\"castVote(uint256,uint8)\":{\"details\":\"See {IGovernor-castVote}.\"},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"details\":\"See {IGovernor-castVoteBySig}.\"},\"castVoteWithReason(uint256,uint8,string)\":{\"details\":\"See {IGovernor-castVoteWithReason}.\"},\"execute(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-execute}.\"},\"getVotes(address,uint256)\":{\"details\":\"Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens.\",\"params\":{\"account\":\"Voting weight of this Address\",\"blockNumber\":\"Checkpoint at this blockNumber\"}},\"hasVoted(uint256,address)\":{\"details\":\"See {IGovernor-hasVoted}.\"},\"hashProposal(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts.\"},\"initialize(string,address,address,uint64,uint256,uint256,uint256,uint256,address)\":{\"details\":\"Configures Gov Module implementationCalled once during deployment atomically\",\"params\":{\"_accessControl\":\"Address of Access Control\",\"_initialProposalThreshold\":\"Total tokens required to submit a proposal\",\"_initialQuorumNumeratorValue\":\"Total votes needed to reach quorum\",\"_initialVoteExtension\":\"Allow users to vote if quorum attack is preformed\",\"_initialVotingDelay\":\"Allow users to research proposals before voting period\",\"_initialVotingPeriod\":\"Length of voting period (blocks)\",\"_name\":\"Name of the DAO\",\"_timelock\":\"Timelock vest proposals to allow detractors to exit system\",\"_token\":\"Voting token uses snapshot feature\"}},\"lateQuorumVoteExtension()\":{\"details\":\"Returns the current value of the vote extension parameter: the number of blocks that are required to pass from the time a proposal reaches quorum until its voting period ends.\"},\"name()\":{\"details\":\"See {IGovernor-name}.\"},\"proposalDeadline(uint256)\":{\"details\":\"Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote during this block.\",\"params\":{\"proposalId\":\"keccak256 hash of proposal params\"}},\"proposalEta(uint256)\":{\"details\":\"Public accessor to check the eta of a queued proposal\",\"params\":{\"proposalId\":\"keccak256 hash of proposal params\"}},\"proposalSnapshot(uint256)\":{\"details\":\"See {IGovernor-proposalSnapshot}.\"},\"proposalThreshold()\":{\"details\":\"Total vote weight required to create a proposal\"},\"proposalVotes(uint256)\":{\"details\":\"Accessor to the internal vote counts.\"},\"propose(address[],uint256[],bytes[],string)\":{\"details\":\"Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends {IGovernor-votingPeriod} blocks after the voting starts. Emits a {ProposalCreated} event.\",\"params\":{\"calldatas\":\"Function Sigs w/ Params\",\"description\":\"Description of proposal\",\"targets\":\"Contract addresses the DAO will call\",\"values\":\"Ether values to be sent to the target address\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"queue(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Function to queue a proposal to the timelock.\",\"params\":{\"calldatas\":\"Function Sigs w/ Params \",\"descriptionHash\":\"Description of proposal\",\"targets\":\"Contract addresses the DAO will call\",\"values\":\"Ether values to be sent to the target address\"}},\"quorum(uint256)\":{\"details\":\"Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\",\"params\":{\"blockNumber\":\"Checkpoint at this blockNumber\"}},\"quorumDenominator()\":{\"details\":\"Returns the quorum denominator. Defaults to 100, but may be overridden.\"},\"quorumNumerator()\":{\"details\":\"Returns the current quorum numerator. See {quorumDenominator}.\"},\"relay(address,uint256,bytes)\":{\"details\":\"Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant.\"},\"setLateQuorumVoteExtension(uint64)\":{\"details\":\"Changes the {lateQuorumVoteExtension}. This operation can only be performed by the governance executor, generally through a governance proposal. Emits a {LateQuorumVoteExtensionSet} event.\"},\"setProposalThreshold(uint256)\":{\"details\":\"Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event.\"},\"setVotingDelay(uint256)\":{\"details\":\"Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event.\"},\"setVotingPeriod(uint256)\":{\"details\":\"Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event.\"},\"state(uint256)\":{\"details\":\"Overriden version of the {Governor-state} function with added support for the `Queued` status.\",\"params\":{\"proposalId\":\"keccak256 hash of proposal params\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\",\"params\":{\"interfaceId\":\"An interface ID bytes4 as defined by ERC-165\"},\"returns\":{\"_0\":\"bool Indicates whether the interface is supported\"}},\"timelock()\":{\"details\":\"Public accessor to check the address of the timelock\"},\"updateQuorumNumerator(uint256)\":{\"details\":\"Changes the quorum numerator. Emits a {QuorumNumeratorUpdated} event. Requirements: - Must be called through a governance proposal. - New numerator must be smaller or equal to the denominator.\"},\"updateTimelock(address)\":{\"details\":\"Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled, and executed through governance proposals. CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\",\"params\":{\"newTimelock\":\"Address of new Timelock Address\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"details\":\"See {IGovernor-version}.\"},\"votingDelay()\":{\"details\":\"Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\"},\"votingPeriod()\":{\"details\":\"Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getVotes(address,uint256)\":{\"notice\":\"module:reputation\"},\"proposalDeadline(uint256)\":{\"notice\":\"module:core\"},\"quorum(uint256)\":{\"notice\":\"module:user-config\"},\"votingDelay()\":{\"notice\":\"module:user-config\"},\"votingPeriod()\":{\"notice\":\"module:user-config\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Governor/GovernorModule.sol\":\"GovernorModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/Governor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/TimersUpgradeable.sol\\\";\\nimport \\\"./IGovernorUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended though various modules.\\n *\\n * This contract is abstract and requires several function to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {getVotes}\\n * - Additionanly, the {votingPeriod} must also be implemented\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, EIP712Upgradeable, IGovernorUpgradeable {\\n    using SafeCastUpgradeable for uint256;\\n    using TimersUpgradeable for TimersUpgradeable.BlockNumber;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n\\n    struct ProposalCore {\\n        TimersUpgradeable.BlockNumber voteStart;\\n        TimersUpgradeable.BlockNumber voteEnd;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n\\n    /**\\n     * @dev Restrict access of functions to the governance executor, which may be the Governor itself or a timelock\\n     * contract, as specified by {_executor}. This generally means that function with this modifier must be voted on and\\n     * executed through the governance protocol.\\n     */\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {name} and {version}\\n     */\\n    function __Governor_init(string memory name_) internal onlyInitializing {\\n        __EIP712_init_unchained(name_, version());\\n        __Governor_init_unchained(name_);\\n    }\\n\\n    function __Governor_init_unchained(string memory name_) internal onlyInitializing {\\n        _name = name_;\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\\n     */\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IGovernorUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-version}.\\n     */\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hashProposal}.\\n     *\\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n     * advance, before the proposal is submitted.\\n     *\\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n     * accross multiple networks. This also means that in order to execute the same operation twice (on the same\\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-state}.\\n     */\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if (snapshot == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        if (snapshot >= block.number) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if (deadline >= block.number) {\\n            return ProposalState.Active;\\n        }\\n\\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalSnapshot}.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart.getDeadline();\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd.getDeadline();\\n    }\\n\\n    /**\\n     * @dev Part of the Governor Bravo's interface: _\\\"The number of votes required in order for a voter to become a proposer\\\"_.\\n     */\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Amount of votes already cast passes the threshold limit.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Is the proposal successful or not.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Register a vote with a given support and voting weight.\\n     *\\n     * Note: Support is generic and can represent various things depending on the voting system used.\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual;\\n\\n    /**\\n     * @dev See {IGovernor-propose}.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        require(\\n            getVotes(msg.sender, block.number - 1) >= proposalThreshold(),\\n            \\\"GovernorCompatibilityBravo: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(proposal.voteStart.isUnset(), \\\"Governor: proposal already exists\\\");\\n\\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\\n        uint64 deadline = snapshot + votingPeriod().toUint64();\\n\\n        proposal.voteStart.setDeadline(snapshot);\\n        proposal.voteEnd.setDeadline(deadline);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-execute}.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Internal execution mechanism. Can be overriden to implement different execution mechanism\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            AddressUpgradeable.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\\n     * canceled to allow distinguishing it from executed proposals.\\n     *\\n     * Emits a {IGovernor-ProposalCanceled} event.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVote}.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReason}.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteBySig}.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSAUpgradeable.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\\n        _countVote(proposalId, account, support, weight);\\n\\n        emit VoteCast(account, proposalId, support, weight, reason);\\n\\n        return weight;\\n    }\\n\\n    /**\\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\\n     */\\n    function relay(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual onlyGovernance {\\n        AddressUpgradeable.functionCallWithValue(target, data, value);\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\\n     * through another contract such as a timelock.\\n     */\\n    function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x12b31461d49b8a1589ef116b3d362314452c9170399df7d008fd48bad44bb1ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorUpgradeable is Initializable, IERC165Upgradeable {\\n    function __IGovernor_init() internal onlyInitializing {\\n    }\\n\\n    function __IGovernor_init_unchained() internal onlyInitializing {\\n    }\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast.\\n     *\\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcbbe2908ebd8339c132372673a2284f0b81c64644166dc15ea7b2ad0be80472e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GovernorUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimpleUpgradeable is Initializable, GovernorUpgradeable {\\n    function __GovernorCountingSimple_init() internal onlyInitializing {\\n    }\\n\\n    function __GovernorCountingSimple_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(uint256 proposalId)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 againstVotes,\\n            uint256 forVotes,\\n            uint256 abstainVotes\\n        )\\n    {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n        return (proposalvote.againstVotes, proposalvote.forVotes, proposalvote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalvote.forVotes + proposalvote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        return proposalvote.forVotes > proposalvote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual override {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        require(!proposalvote.hasVoted[account], \\\"GovernorVotingSimple: vote already cast\\\");\\n        proposalvote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalvote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalvote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalvote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"GovernorVotingSimple: invalid value for enum VoteType\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9b3f89e8048df86745c631ebd2504867fcf9121ef3fa70f52d7220033af0fd50\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorPreventLateQuorumUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorPreventLateQuorum.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GovernorUpgradeable.sol\\\";\\nimport \\\"../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev A module that ensures there is a minimum voting period after quorum is reached. This prevents a large voter from\\n * swaying a vote and triggering quorum at the last minute, by ensuring there is always time for other voters to react\\n * and try to oppose the decision.\\n *\\n * If a vote causes quorum to be reached, the proposal's voting period may be extended so that it does not end before at\\n * least a given number of blocks have passed (the \\\"vote extension\\\" parameter). This parameter can be set by the\\n * governance executor (e.g. through a governance proposal).\\n *\\n * _Available since v4.5._\\n */\\nabstract contract GovernorPreventLateQuorumUpgradeable is Initializable, GovernorUpgradeable {\\n    using SafeCastUpgradeable for uint256;\\n    using TimersUpgradeable for TimersUpgradeable.BlockNumber;\\n\\n    uint64 private _voteExtension;\\n    mapping(uint256 => TimersUpgradeable.BlockNumber) private _extendedDeadlines;\\n\\n    /// @dev Emitted when a proposal deadline is pushed back due to reaching quorum late in its voting period.\\n    event ProposalExtended(uint256 indexed proposalId, uint64 extendedDeadline);\\n\\n    /// @dev Emitted when the {lateQuorumVoteExtension} parameter is changed.\\n    event LateQuorumVoteExtensionSet(uint64 oldVoteExtension, uint64 newVoteExtension);\\n\\n    /**\\n     * @dev Initializes the vote extension parameter: the number of blocks that are required to pass since a proposal\\n     * reaches quorum until its voting period ends. If necessary the voting period will be extended beyond the one set\\n     * at proposal creation.\\n     */\\n    function __GovernorPreventLateQuorum_init(uint64 initialVoteExtension) internal onlyInitializing {\\n        __GovernorPreventLateQuorum_init_unchained(initialVoteExtension);\\n    }\\n\\n    function __GovernorPreventLateQuorum_init_unchained(uint64 initialVoteExtension) internal onlyInitializing {\\n        _setLateQuorumVoteExtension(initialVoteExtension);\\n    }\\n\\n    /**\\n     * @dev Returns the proposal deadline, which may have been extended beyond that set at proposal creation, if the\\n     * proposal reached quorum late in the voting period. See {Governor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return MathUpgradeable.max(super.proposalDeadline(proposalId), _extendedDeadlines[proposalId].getDeadline());\\n    }\\n\\n    /**\\n     * @dev Casts a vote and detects if it caused quorum to be reached, potentially extending the voting period. See\\n     * {Governor-_castVote}.\\n     *\\n     * May emit a {ProposalExtended} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual override returns (uint256) {\\n        uint256 result = super._castVote(proposalId, account, support, reason);\\n\\n        TimersUpgradeable.BlockNumber storage extendedDeadline = _extendedDeadlines[proposalId];\\n\\n        if (extendedDeadline.isUnset() && _quorumReached(proposalId)) {\\n            uint64 extendedDeadlineValue = block.number.toUint64() + lateQuorumVoteExtension();\\n\\n            if (extendedDeadlineValue > proposalDeadline(proposalId)) {\\n                emit ProposalExtended(proposalId, extendedDeadlineValue);\\n            }\\n\\n            extendedDeadline.setDeadline(extendedDeadlineValue);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the current value of the vote extension parameter: the number of blocks that are required to pass\\n     * from the time a proposal reaches quorum until its voting period ends.\\n     */\\n    function lateQuorumVoteExtension() public view virtual returns (uint64) {\\n        return _voteExtension;\\n    }\\n\\n    /**\\n     * @dev Changes the {lateQuorumVoteExtension}. This operation can only be performed by the governance executor,\\n     * generally through a governance proposal.\\n     *\\n     * Emits a {LateQuorumVoteExtensionSet} event.\\n     */\\n    function setLateQuorumVoteExtension(uint64 newVoteExtension) public virtual onlyGovernance {\\n        _setLateQuorumVoteExtension(newVoteExtension);\\n    }\\n\\n    /**\\n     * @dev Changes the {lateQuorumVoteExtension}. This is an internal function that can be exposed in a public function\\n     * like {setLateQuorumVoteExtension} if another access control mechanism is needed.\\n     *\\n     * Emits a {LateQuorumVoteExtensionSet} event.\\n     */\\n    function _setLateQuorumVoteExtension(uint64 newVoteExtension) internal virtual {\\n        emit LateQuorumVoteExtensionSet(_voteExtension, newVoteExtension);\\n        _voteExtension = newVoteExtension;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xe8d562d69b33e7639efab8184c80bd80bc06fa0e2be01166c25d410555795ff2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorSettings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GovernorUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for settings updatable through governance.\\n *\\n * _Available since v4.4._\\n */\\nabstract contract GovernorSettingsUpgradeable is Initializable, GovernorUpgradeable {\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n    uint256 private _proposalThreshold;\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    /**\\n     * @dev Initialize the governance parameters.\\n     */\\n    function __GovernorSettings_init(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) internal onlyInitializing {\\n        __GovernorSettings_init_unchained(initialVotingDelay, initialVotingPeriod, initialProposalThreshold);\\n    }\\n\\n    function __GovernorSettings_init_unchained(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) internal onlyInitializing {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingDelay}.\\n     */\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingPeriod}.\\n     */\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    /**\\n     * @dev See {Governor-proposalThreshold}.\\n     */\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        return _proposalThreshold;\\n    }\\n\\n    /**\\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    /**\\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    /**\\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting delay.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting period.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        // voting period must be at least one block long\\n        require(newVotingPeriod > 0, \\\"GovernorSettings: voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the proposal threshold.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\\n        _proposalThreshold = newProposalThreshold;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x40a467e40a336fa58517bc31a21d341d5086e8d6555d5148cbf697200343f647\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./GovernorVotesUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesQuorumFractionUpgradeable is Initializable, GovernorVotesUpgradeable {\\n    uint256 private _quorumNumerator;\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    /**\\n     * @dev Initialize quorum as a fraction of the token's total supply.\\n     *\\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\\n     * customized by overriding {quorumDenominator}.\\n     */\\n    function __GovernorVotesQuorumFraction_init(uint256 quorumNumeratorValue) internal onlyInitializing {\\n        __GovernorVotesQuorumFraction_init_unchained(quorumNumeratorValue);\\n    }\\n\\n    function __GovernorVotesQuorumFraction_init_unchained(uint256 quorumNumeratorValue) internal onlyInitializing {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    /**\\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\\n     */\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumerator;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\\n     */\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum for a block number, in terms of number of votes: `supply * numerator / denominator`.\\n     */\\n    function quorum(uint256 blockNumber) public view virtual override returns (uint256) {\\n        return (token.getPastTotalSupply(blockNumber) * quorumNumerator()) / quorumDenominator();\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Must be called through a governance proposal.\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = _quorumNumerator;\\n        _quorumNumerator = newQuorumNumerator;\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x91136e02ab0c9958aa60de7c4f8c86b32e98abcb20788b6272e831c9102315c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../GovernorUpgradeable.sol\\\";\\nimport \\\"../utils/IVotesUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesUpgradeable is Initializable, GovernorUpgradeable {\\n    IVotesUpgradeable public token;\\n\\n    function __GovernorVotes_init(IVotesUpgradeable tokenAddress) internal onlyInitializing {\\n        __GovernorVotes_init_unchained(tokenAddress);\\n    }\\n\\n    function __GovernorVotes_init_unchained(IVotesUpgradeable tokenAddress) internal onlyInitializing {\\n        token = tokenAddress;\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        return token.getPastVotes(account, blockNumber);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xeaed9ce9b909f1e5926327867017cb2d974edcf6369660ff74a60d9bfd6e3dc7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/TimersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary TimersUpgradeable {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xb5dac0ce830eea037a65d37b83863f6a265668a37893b1ac4c01b77c7cf68e9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb4132c3e4beb76a6c6b8c5931abecfc426bbd120d14f065d0cd1411675e88693\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcec885ecdf113b4265ed0856972d7ff167bfeb3802604b18cbb782bf47ecc4ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ModuleBase.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./interfaces/IModuleBase.sol\\\";\\r\\n\\r\\n/// @notice An abstract contract to be inherited by module contracts\\r\\nabstract contract ModuleBase is IModuleBase, UUPSUpgradeable, ERC165 {\\r\\n    IAccessControl public accessControl;\\r\\n\\r\\n    /// @notice Requires that a function caller has the associated role\\r\\n    modifier authorized() {\\r\\n        if (\\r\\n            !accessControl.actionIsAuthorized(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                msg.sig\\r\\n            )\\r\\n        ) {\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns whether a given interface ID is supported\\r\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\r\\n    /// @return bool Indicates whether the interface is supported\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IModuleBase).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for initializing the contract that can only be called once\\r\\n    /// @param _accessControl The address of the access control contract\\r\\n    function __initBase(address _accessControl) internal onlyInitializing {\\r\\n        accessControl = IAccessControl(_accessControl);\\r\\n        __UUPSUpgradeable_init();\\r\\n    }\\r\\n\\r\\n    /// @dev Applies authorized modifier so that an upgrade require the caller to have the correct role\\r\\n\\r\\n    /// @param newImplementation The address of the new implementation contract being upgraded to\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n        internal\\r\\n        override\\r\\n        authorized\\r\\n    {}\\r\\n}\\r\\n\",\"keccak256\":\"0x3bd95718ce75b7f7dfcda4481082a3fd12edc6937e9fb6a94d5ac9c6805ed159\",\"license\":\"Unlicense\"},\"contracts/interfaces/IAccessControl.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAccessControl {\\r\\n    struct RoleData {\\r\\n        mapping(address => bool) members;\\r\\n        string adminRole;\\r\\n    }\\r\\n\\r\\n    error UnequalArrayLengths();\\r\\n    error MissingRole(address account, string role);\\r\\n    error OnlySelfRenounce();\\r\\n\\r\\n    event ActionRoleAdded(\\r\\n        address target,\\r\\n        string functionDesc,\\r\\n        bytes4 encodedSig,\\r\\n        string role\\r\\n    );\\r\\n    event ActionRoleRemoved(\\r\\n        address target,\\r\\n        string functionDesc,\\r\\n        bytes4 encodedSig,\\r\\n        string role\\r\\n    );\\r\\n    event RoleAdminChanged(\\r\\n        string role,\\r\\n        string previousAdminRole,\\r\\n        string adminRole\\r\\n    );\\r\\n    event RoleGranted(string role, address account, address admin);\\r\\n    event RoleRevoked(string role, address account, address admin);\\r\\n\\r\\n    /// @notice Initialize DAO action and role permissions\\r\\n    /// @param dao Address to receive DAO role\\r\\n    /// @param roles What permissions are assigned to\\r\\n    /// @param roleAdmins Roles which have the ability to remove or add members\\r\\n    /// @param members Addresses to be granted the specified roles\\r\\n    /// @param targets Contract addresses for actions to be defined on\\r\\n    /// @param functionDescs Function descriptions used to define actions\\r\\n    /// @param actionRoles Roles being granted permission for an action\\r\\n    function initialize(\\r\\n        address dao,\\r\\n        string[] memory roles,\\r\\n        string[] memory roleAdmins,\\r\\n        address[][] memory members,\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory actionRoles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Grants roles to the specified addresses and defines admin roles\\r\\n    /// @param roles The roles being granted\\r\\n    /// @param roleAdmins The roles being granted as admins of the specified of roles\\r\\n    /// @param members Addresses being granted each specified role\\r\\n    function grantRolesAndAdmins(\\r\\n        string[] memory roles,\\r\\n        string[] memory roleAdmins,\\r\\n        address[][] memory members\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Grants roles to the specified addresses\\r\\n    /// @param roles The roles being granted\\r\\n    /// @param members Addresses being granted each specified role\\r\\n    function grantRoles(string[] memory roles, address[][] memory members)\\r\\n        external;\\r\\n\\r\\n    /// @notice Grants a role to the specified address\\r\\n    /// @param role The role being granted\\r\\n    /// @param account The address being granted the specified role\\r\\n    function grantRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Revokes a role from the specified address\\r\\n    /// @param role The role being revoked\\r\\n    /// @param account The address the role is being revoked from\\r\\n    function revokeRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Enables an address to remove one of its own roles\\r\\n    /// @param role The role being renounced\\r\\n    /// @param account The address renouncing the role\\r\\n    function renounceRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Authorizes roles to execute the specified actions\\r\\n    /// @param targets The contract addresses that the action functions are implemented on\\r\\n    /// @param functionDescs The function descriptions used to define the actions\\r\\n    /// @param roles Roles being granted permission for an action\\r\\n    function addActionsRoles(\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory roles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Removes autorization for roles to execute the specified actions\\r\\n    /// @param targets The contract addresses that the action functions are implemented on\\r\\n    /// @param functionDescs The function description used to define the actions\\r\\n    /// @param roles Roles that action permissions are being removed on\\r\\n    function removeActionsRoles(\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory roles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Checks if a caller has the permissions to execute the specific action\\r\\n    /// @param caller Address attempting to execute the action\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param sig The function signature used to define the action\\r\\n    function actionIsAuthorized(\\r\\n        address caller,\\r\\n        address target,\\r\\n        bytes4 sig\\r\\n    ) external view returns (bool isAuthorized);\\r\\n\\r\\n    /// @notice Returns the roles autorized to execute the specified action\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param functionDesc The function description used to define the action\\r\\n    function getActionRoles(address target, string memory functionDesc)\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory roles);\\r\\n\\r\\n    /// @notice Checks if a specific role is authorized for an action\\r\\n    /// @param role Role that authorization is being checked on\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param functionDesc Function description used to define the action\\r\\n    /// @return isAuthorized Indicates whether the role is authorized to execute the action\\r\\n    function isRoleAuthorized(\\r\\n        string calldata role,\\r\\n        address target,\\r\\n        string memory functionDesc\\r\\n    ) external view returns (bool isAuthorized);\\r\\n\\r\\n    /// @notice Returns whether the account has been granted the role\\r\\n    /// @param role Role that authorization is being checked on\\r\\n    /// @param account Address that the role authorization is being check on\\r\\n    /// @return boolean Indicates whether the address has been granted the role\\r\\n    function hasRole(string memory role, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /// @notice Returns the role that is the admin of the specified role\\r\\n    /// @param role Role that the admin role is being returned for\\r\\n    /// @return string The admin role of the specified role\\r\\n    function getRoleAdmin(string memory role)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    /// @return string The string \\\"DAO_ROLE\\\"\\r\\n    function DAO_ROLE() external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xae2952dc66a42acbef4a2f9955ca8c0bcfa2b61da963ab76f9bc1aa6835b14c5\",\"license\":\"Unlicense\"},\"contracts/interfaces/IGovTimelockUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/IGovernorUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/// @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\r\\n/// delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\r\\n/// {Governor} needs to be authorized within the Access Control Contract in order to execute transactions on the TimelockController.\\r\\n/// Using this model means the proposal will be operated by the MVD.\\r\\nabstract contract IGovTimelockUpgradeable is\\r\\n    Initializable,\\r\\n    IGovernorUpgradeable\\r\\n{\\r\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\r\\n    /// @dev Public accessor to check the address of the timelock\\r\\n    function timelock() public view virtual returns (address);\\r\\n\\r\\n    /// @dev Public accessor to check the eta of a queued proposal\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function proposalEta(uint256 proposalId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Function to queue a proposal to the timelock.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function queue(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) public virtual returns (uint256 proposalId);\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x8dc6a3e20a9f6d979fa15976552b63b696cc7b9437038f98be2d36f7093dd061\",\"license\":\"Unlicense\"},\"contracts/interfaces/IGovernorModule.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.2;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesUpgradeable.sol\\\";\\r\\nimport \\\"../modules/Governor/GovTimelockUpgradeable.sol\\\";\\r\\n\\r\\n/// @dev Governor Module used to implement 1 token 1 vote.\\r\\n/// This acts as an extension of the MVD and permissions are controlled by access control.\\r\\n/// @dev Gov Module is extended by the timelock contract which creates a lockup period before execution.\\r\\ninterface IGovernorModule {\\r\\n    /// @dev Configures Gov Module implementation\\r\\n    /// @dev Called once during deployment atomically\\r\\n    /// @param _name Name of the DAO\\r\\n    /// @param _token Voting token uses snapshot feature\\r\\n    /// @param _timelock Timelock vest proposals to allow detractors to exit system\\r\\n    /// @param _initialVoteExtension Allow users to vote if quorum attack is preformed\\r\\n    /// @param _initialVotingDelay Allow users to research proposals before voting period\\r\\n    /// @param _initialVotingPeriod Length of voting period (blocks)\\r\\n    /// @param _initialProposalThreshold Total tokens required to submit a proposal\\r\\n    /// @param _initialQuorumNumeratorValue Total votes needed to reach quorum\\r\\n    /// @param _accessControl Address of Access Control\\r\\n\\r\\n\\r\\n    function initialize(\\r\\n        string memory _name,\\r\\n        IVotesUpgradeable _token,\\r\\n        ITimelockUpgradeable _timelock,\\r\\n        uint64 _initialVoteExtension,\\r\\n        uint256 _initialVotingDelay,\\r\\n        uint256 _initialVotingPeriod,\\r\\n        uint256 _initialProposalThreshold,\\r\\n        uint256 _initialQuorumNumeratorValue,\\r\\n        address _accessControl\\r\\n    ) external;\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    enum ProposalState {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Canceled,\\r\\n        Defeated,\\r\\n        Succeeded,\\r\\n        Queued,\\r\\n        Expired,\\r\\n        Executed\\r\\n    }\\r\\n\\r\\n    /// @notice module:user-config\\r\\n    /// @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\r\\n    /// leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\r\\n    function votingDelay() external view returns (uint256);\\r\\n\\r\\n    /// @notice module:user-config\\r\\n    /// @dev Delay, in number of blocks, between the vote start and vote ends.\\r\\n    /// NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\r\\n    /// duration compared to the voting delay.\\r\\n    function votingPeriod() external view returns (uint256);\\r\\n\\r\\n    /// @notice module:user-config\\r\\n    /// @dev Minimum number of cast voted required for a proposal to be successful.\\r\\n    /// Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\r\\n    /// quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\r\\n    /// @param blockNumber Checkpoint at this blockNumber\\r\\n    function quorum(uint256 blockNumber) external view returns (uint256);\\r\\n\\r\\n    /// @notice module:reputation\\r\\n    /// @dev Voting power of an `account` at a specific `blockNumber`.\\r\\n    /// Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\r\\n    /// multiple), {ERC20Votes} tokens.\\r\\n    /// @param account Voting weight of this Address\\r\\n    /// @param blockNumber Checkpoint at this blockNumber\\r\\n    function getVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function state(uint256 proposalId) external view returns (ProposalState);\\r\\n\\r\\n    /// @notice module:core\\r\\n    /// @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\r\\n    /// during this block.\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function proposalDeadline(uint256 proposalId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\r\\n    /// {IGovernor-votingPeriod} blocks after the voting starts.\\r\\n    /// Emits a {ProposalCreated} event.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params\\r\\n    /// @param description Description of proposal\\r\\n    function propose(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        string memory description\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @dev Total vote weight required to create a proposal\\r\\n    function proposalThreshold() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x723a0970ce4380fce65cca203e9496b8dc22716986179995de8421d623556246\",\"license\":\"Unlicense\"},\"contracts/interfaces/IModuleBase.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IAccessControl.sol\\\";\\r\\n\\r\\ninterface IModuleBase {\\r\\n    error NotAuthorized();\\r\\n\\r\\n    /// @return IAccessControl The Access control interface\\r\\n    function accessControl() external view returns (IAccessControl);\\r\\n}\\r\\n\",\"keccak256\":\"0xb292c8701e9706a981791f66aa8197f5cf47b624792932b1a2e6413ac43cbb97\",\"license\":\"Unlicense\"},\"contracts/interfaces/ITimelockUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITimelockUpgradeable {\\r\\n    /// @dev Emitted when a call is scheduled as part of operation `id`.\\r\\n    event CallScheduled(\\r\\n        bytes32 indexed id,\\r\\n        uint256 indexed index,\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        bytes data,\\r\\n        bytes32 predecessor,\\r\\n        uint256 delay\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when a call is performed as part of operation `id`.\\r\\n    event CallExecuted(\\r\\n        bytes32 indexed id,\\r\\n        uint256 indexed index,\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        bytes data\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when operation `id` is cancelled.\\r\\n    event Cancelled(bytes32 indexed id);\\r\\n\\r\\n    /// @dev Emitted when the minimum delay for future operations is modified.\\r\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\r\\n\\r\\n    /// @dev Contract might receive/hold ETH as part of the maintenance process.\\r\\n    receive() external payable;\\r\\n\\r\\n    /// @notice Function for initializing the contract that can only be called once\\r\\n    /// @param _accessControl The address of the access control contract\\r\\n    /// @param _dao The address of the dao contract\\r\\n    /// @param _minDelay init the contract with a given `minDelay`.\\r\\n    function initialize(\\r\\n        address _accessControl,\\r\\n        address _dao,\\r\\n        uint256 _minDelay\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Changes the minimum timelock duration for future operations.\\r\\n    /// Emits a {MinDelayChange} event.\\r\\n    /// Requirements:\\r\\n    /// - the caller must be authorized.\\r\\n    /// @param newDelay Update the delay between queue and execute\\r\\n    function updateDelay(uint256 newDelay) external;\\r\\n\\r\\n    /// @dev Schedule an operation containing a batch of transactions.\\r\\n    /// Emits one {CallScheduled} event per transaction in the batch.\\r\\n    /// - the caller must be authorized.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param datas Function Sigs w/ Params \\r\\n    /// @param predecessor GovTimelock passes this as 0\\r\\n    /// @param salt Description Hash\\r\\n    /// @param delay current delay set in contract\\r\\n    function scheduleBatch(\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata datas,\\r\\n        bytes32 predecessor,\\r\\n        bytes32 salt,\\r\\n        uint256 delay\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Cancel an operation.\\r\\n    /// - the caller must be authorized.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function cancel(bytes32 id) external;\\r\\n\\r\\n    /// @dev Execute an (ready) operation containing a batch of transactions.\\r\\n    /// Emits one {CallExecuted} event per transaction in the batch.\\r\\n    /// - the caller must be authorized\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param datas Function Sigs w/ Params \\r\\n    /// @param predecessor GovTimelock passes this as 0\\r\\n    /// @param salt Description Hash\\r\\n    function executeBatch(\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata datas,\\r\\n        bytes32 predecessor,\\r\\n        bytes32 salt\\r\\n    ) external payable;\\r\\n\\r\\n    /// @dev Returns whether an id correspond to a registered operation. This\\r\\n    /// includes both Pending, Ready and Done operations.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function isOperation(bytes32 id) external view returns (bool pending);\\r\\n\\r\\n    /// @dev Returns whether an operation is pending or not.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function isOperationPending(bytes32 id)\\r\\n        external\\r\\n        view\\r\\n        returns (bool pending);\\r\\n\\r\\n    /// @dev Returns whether an operation is ready or not.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function isOperationReady(bytes32 id) external view returns (bool ready);\\r\\n\\r\\n    /// @dev Returns whether an operation is done or not.\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function isOperationDone(bytes32 id) external view returns (bool done);\\r\\n\\r\\n    /// @dev Returns the timestamp at with an operation becomes ready (0 for\\r\\n    /// unset operations, 1 for done operations).\\r\\n    /// @param id keccak256 hash of proposal params\\r\\n    function getTimestamp(bytes32 id) external view returns (uint256 timestamp);\\r\\n\\r\\n    /// @dev Returns the minimum delay for an operation to become valid.\\r\\n    /// This value can be changed by executing an operation that calls `updateDelay`.\\r\\n    function getMinDelay() external view returns (uint256 duration);\\r\\n\\r\\n    /// @dev Returns the identifier of an operation containing a batch of\\r\\n    /// transactions.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param datas Function Sigs w/ Params \\r\\n    /// @param predecessor GovTimelock passes this as 0\\r\\n    /// @param salt Description Hash\\r\\n    function hashOperationBatch(\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata datas,\\r\\n        bytes32 predecessor,\\r\\n        bytes32 salt\\r\\n    ) external pure returns (bytes32 hash);\\r\\n}\\r\\n\",\"keccak256\":\"0xd68208695c85a33f6c9b1629b21794933f00a73352ce8473c6e412321a41bf78\",\"license\":\"Unlicense\"},\"contracts/modules/Governor/GovTimelockUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorTimelockControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/GovernorUpgradeable.sol\\\";\\r\\nimport \\\"../../interfaces/IGovTimelockUpgradeable.sol\\\";\\r\\nimport \\\"../../interfaces/ITimelockUpgradeable.sol\\\";\\r\\n\\r\\n/// @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\r\\n/// delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\r\\n/// {Governor} needs to be authorized within the Access Control Contract in order to execute transactions on the TimelockController.\\r\\n/// Using this model means the proposal will be operated by the MVD.\\r\\nabstract contract GovTimelockUpgradeable is\\r\\n    Initializable,\\r\\n    IGovTimelockUpgradeable,\\r\\n    GovernorUpgradeable\\r\\n{\\r\\n    ITimelockUpgradeable private _timelock;\\r\\n    mapping(uint256 => bytes32) private _timelockIds;\\r\\n\\r\\n    /// @dev Emitted when the timelock controller used for proposal execution is modified.\\r\\n    event TimelockChange(address oldTimelock, address newTimelock);\\r\\n\\r\\n    /// @dev Set the timelock.\\r\\n    /// @param timelockAddress Address of the Timelock contract.\\r\\n    function __GovTimelock_init(ITimelockUpgradeable timelockAddress)\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        __GovTimelock_init_unchained(timelockAddress);\\r\\n    }\\r\\n\\r\\n    function __GovTimelock_init_unchained(ITimelockUpgradeable timelockAddress)\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        _updateTimelock(timelockAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev See {IERC165-supportsInterface}.\\r\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\r\\n    /// @return bool Indicates whether the interface is supported\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(IERC165Upgradeable, GovernorUpgradeable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IGovTimelockUpgradeable).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function state(uint256 proposalId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(IGovernorUpgradeable, GovernorUpgradeable)\\r\\n        returns (ProposalState)\\r\\n    {\\r\\n        ProposalState status = super.state(proposalId);\\r\\n\\r\\n        if (status != ProposalState.Succeeded) {\\r\\n            return status;\\r\\n        }\\r\\n\\r\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\r\\n        bytes32 queueid = _timelockIds[proposalId];\\r\\n        if (queueid == bytes32(0)) {\\r\\n            return status;\\r\\n        } else if (_timelock.isOperationDone(queueid)) {\\r\\n            return ProposalState.Executed;\\r\\n        } else if (_timelock.isOperationPending(queueid)) {\\r\\n            return ProposalState.Queued;\\r\\n        } else {\\r\\n            return ProposalState.Canceled;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Public accessor to check the address of the timelock\\r\\n    function timelock() public view virtual override returns (address) {\\r\\n        return address(_timelock);\\r\\n    }\\r\\n\\r\\n    /// @dev Public accessor to check the eta of a queued proposal\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function proposalEta(uint256 proposalId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\r\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\r\\n    }\\r\\n\\r\\n    /// @dev Function to queue a proposal to the timelock.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function queue(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) public virtual override returns (uint256) {\\r\\n        uint256 proposalId = hashProposal(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            descriptionHash\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            state(proposalId) == ProposalState.Succeeded,\\r\\n            \\\"Governor: proposal not successful\\\"\\r\\n        );\\r\\n\\r\\n        uint256 delay = _timelock.getMinDelay();\\r\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            0,\\r\\n            descriptionHash\\r\\n        );\\r\\n        _timelock.scheduleBatch(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            0,\\r\\n            descriptionHash,\\r\\n            delay\\r\\n        );\\r\\n\\r\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\r\\n\\r\\n        return proposalId;\\r\\n    }\\r\\n\\r\\n    /// @dev Overriden execute function that run the already queued proposal through the timelock.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function _execute(\\r\\n        uint256, /* proposalId */\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) internal virtual override {\\r\\n        _timelock.executeBatch{value: msg.value}(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            0,\\r\\n            descriptionHash\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\r\\n    /// been queued.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function _cancel(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) internal virtual override returns (uint256) {\\r\\n        uint256 proposalId = super._cancel(\\r\\n            targets,\\r\\n            values,\\r\\n            calldatas,\\r\\n            descriptionHash\\r\\n        );\\r\\n\\r\\n        if (_timelockIds[proposalId] != 0) {\\r\\n            _timelock.cancel(_timelockIds[proposalId]);\\r\\n            delete _timelockIds[proposalId];\\r\\n        }\\r\\n\\r\\n        return proposalId;\\r\\n    }\\r\\n\\r\\n    /// @dev Address through which the governor executes action. In this case, the timelock.\\r\\n    function _executor() internal view virtual override returns (address) {\\r\\n        return address(_timelock);\\r\\n    }\\r\\n\\r\\n    /// @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\r\\n    /// must be proposed, scheduled, and executed through governance proposals.\\r\\n    /// CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\\r\\n    /// @param newTimelock Address of new Timelock Address\\r\\n    function updateTimelock(ITimelockUpgradeable newTimelock)\\r\\n        external\\r\\n        virtual\\r\\n        onlyGovernance\\r\\n    {\\r\\n        _updateTimelock(newTimelock);\\r\\n    }\\r\\n\\r\\n    function _updateTimelock(ITimelockUpgradeable newTimelock) private {\\r\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\r\\n        _timelock = newTimelock;\\r\\n    }\\r\\n\\r\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\r\\n    /// variables without shifting down storage in the inheritance chain.\\r\\n    /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n    uint256[48] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x959ffc162fc27eef1bd677e3c154df941e2f60fb1cbd5f967c789752397c4308\",\"license\":\"Unlicense\"},\"contracts/modules/Governor/GovernorModule.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorSettingsUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorCountingSimpleUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorVotesQuorumFractionUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/extensions/GovernorPreventLateQuorumUpgradeable.sol\\\";\\r\\nimport \\\"../../ModuleBase.sol\\\";\\r\\nimport \\\"../../interfaces/IGovernorModule.sol\\\";\\r\\n\\r\\n/// @dev Governor Module used to implement 1 token 1 vote.\\r\\n/// This acts as an extension of the MVD and permissions are controlled by access control.\\r\\n/// @dev Gov Module is extended by the timelock contract which creates a lockup period before execution.\\r\\ncontract GovernorModule is\\r\\n    GovernorSettingsUpgradeable,\\r\\n    GovernorCountingSimpleUpgradeable,\\r\\n    GovernorVotesUpgradeable,\\r\\n    GovernorVotesQuorumFractionUpgradeable,\\r\\n    GovTimelockUpgradeable,\\r\\n    ModuleBase,\\r\\n    GovernorPreventLateQuorumUpgradeable\\r\\n{\\r\\n    /// @dev Configures Gov Module implementation\\r\\n    /// @dev Called once during deployment atomically\\r\\n    /// @param _name Name of the DAO\\r\\n    /// @param _token Voting token uses snapshot feature\\r\\n    /// @param _timelock Timelock vest proposals to allow detractors to exit system\\r\\n    /// @param _initialVoteExtension Allow users to vote if quorum attack is preformed\\r\\n    /// @param _initialVotingDelay Allow users to research proposals before voting period\\r\\n    /// @param _initialVotingPeriod Length of voting period (blocks)\\r\\n    /// @param _initialProposalThreshold Total tokens required to submit a proposal\\r\\n    /// @param _initialQuorumNumeratorValue Total votes needed to reach quorum\\r\\n    /// @param _accessControl Address of Access Control\\r\\n    function initialize(\\r\\n        string memory _name,\\r\\n        IVotesUpgradeable _token,\\r\\n        ITimelockUpgradeable _timelock,\\r\\n        uint64 _initialVoteExtension,\\r\\n        uint256 _initialVotingDelay,\\r\\n        uint256 _initialVotingPeriod,\\r\\n        uint256 _initialProposalThreshold,\\r\\n        uint256 _initialQuorumNumeratorValue,\\r\\n        address _accessControl\\r\\n    ) external initializer {\\r\\n        __Governor_init(_name);\\r\\n        __GovernorSettings_init(\\r\\n            _initialVotingDelay,\\r\\n            _initialVotingPeriod,\\r\\n            _initialProposalThreshold\\r\\n        );\\r\\n        __GovernorCountingSimple_init();\\r\\n        __GovernorVotes_init(_token);\\r\\n        __GovernorVotesQuorumFraction_init(_initialQuorumNumeratorValue);\\r\\n        __GovTimelock_init(_timelock);\\r\\n        __initBase(_accessControl);\\r\\n        __GovernorPreventLateQuorum_init(_initialVoteExtension);\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    /// @notice module:user-config\\r\\n    /// @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\r\\n    /// leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\r\\n    function votingDelay()\\r\\n        public\\r\\n        view\\r\\n        override(IGovernorUpgradeable, GovernorSettingsUpgradeable)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super.votingDelay();\\r\\n    }\\r\\n\\r\\n    /// @notice module:user-config\\r\\n    /// @dev Delay, in number of blocks, between the vote start and vote ends.\\r\\n    /// NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\r\\n    /// duration compared to the voting delay.\\r\\n    function votingPeriod()\\r\\n        public\\r\\n        view\\r\\n        override(IGovernorUpgradeable, GovernorSettingsUpgradeable)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super.votingPeriod();\\r\\n    }\\r\\n\\r\\n    /// @notice module:user-config\\r\\n    /// @dev Minimum number of cast voted required for a proposal to be successful.\\r\\n    /// Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\r\\n    /// quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\r\\n    /// @param blockNumber Checkpoint at this blockNumber\\r\\n    function quorum(uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        override(IGovernorUpgradeable, GovernorVotesQuorumFractionUpgradeable)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super.quorum(blockNumber);\\r\\n    }\\r\\n\\r\\n    /// @notice module:reputation\\r\\n    /// @dev Voting power of an `account` at a specific `blockNumber`.\\r\\n    /// Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\r\\n    /// multiple), {ERC20Votes} tokens.\\r\\n    /// @param account Voting weight of this Address\\r\\n    /// @param blockNumber Checkpoint at this blockNumber\\r\\n    function getVotes(address account, uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        override(IGovernorUpgradeable, GovernorVotesUpgradeable)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super.getVotes(account, blockNumber);\\r\\n    }\\r\\n\\r\\n    /// @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function state(uint256 proposalId)\\r\\n        public\\r\\n        view\\r\\n        override(GovernorUpgradeable, GovTimelockUpgradeable)\\r\\n        returns (ProposalState)\\r\\n    {\\r\\n        return super.state(proposalId);\\r\\n    }\\r\\n\\r\\n    /// @notice module:core\\r\\n    /// @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\r\\n    /// during this block.\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    function proposalDeadline(uint256 proposalId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(\\r\\n            GovernorPreventLateQuorumUpgradeable,\\r\\n            GovernorUpgradeable,\\r\\n            IGovernorUpgradeable\\r\\n        )\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super.proposalDeadline(proposalId);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to cast vote for a proposal\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    /// @param account Voting weight of this Address\\r\\n    /// @param support For, Against, Abstain\\r\\n    function _castVote(\\r\\n        uint256 proposalId,\\r\\n        address account,\\r\\n        uint8 support,\\r\\n        string memory reason\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        override(GovernorUpgradeable, GovernorPreventLateQuorumUpgradeable)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super._castVote(proposalId, account, support, reason);\\r\\n    }\\r\\n\\r\\n    /// @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\r\\n    /// {IGovernor-votingPeriod} blocks after the voting starts.\\r\\n    /// Emits a {ProposalCreated} event.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params\\r\\n    /// @param description Description of proposal\\r\\n    function propose(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        string memory description\\r\\n    )\\r\\n        public\\r\\n        override(GovernorUpgradeable, IGovernorUpgradeable)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super.propose(targets, values, calldatas, description);\\r\\n    }\\r\\n\\r\\n    /// @dev Total vote weight required to create a proposal\\r\\n    function proposalThreshold()\\r\\n        public\\r\\n        view\\r\\n        override(GovernorUpgradeable, GovernorSettingsUpgradeable)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super.proposalThreshold();\\r\\n    }\\r\\n\\r\\n    /// @dev Overriden execute function that run the already queued proposal through the timelock.\\r\\n    /// @param proposalId keccak256 hash of proposal params\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function _execute(\\r\\n        uint256 proposalId,\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) internal override(GovernorUpgradeable, GovTimelockUpgradeable) {\\r\\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\\r\\n    }\\r\\n\\r\\n    /// @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\r\\n    /// been queued.\\r\\n    /// @param targets Contract addresses the DAO will call\\r\\n    /// @param values Ether values to be sent to the target address\\r\\n    /// @param calldatas Function Sigs w/ Params \\r\\n    /// @param descriptionHash Description of proposal\\r\\n    function _cancel(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    )\\r\\n        internal\\r\\n        override(GovernorUpgradeable, GovTimelockUpgradeable)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super._cancel(targets, values, calldatas, descriptionHash);\\r\\n    }\\r\\n\\r\\n    /// @dev Address through which the governor executes action. In this case, the timelock.\\r\\n    function _executor()\\r\\n        internal\\r\\n        view\\r\\n        override(GovernorUpgradeable, GovTimelockUpgradeable)\\r\\n        returns (address)\\r\\n    {\\r\\n        return super._executor();\\r\\n    }\\r\\n\\r\\n    /// @dev See {IERC165-supportsInterface}.\\r\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\r\\n    /// @return bool Indicates whether the interface is supported\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(GovernorUpgradeable, GovTimelockUpgradeable, ModuleBase)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return interfaceId == type(IGovernorModule).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd3b7db8e673beafe77b894e8afc6131df05fcf5331802562cc7f0c3a485ed208\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051613cdd61004c60003960008181610c6101528181610ca101528181610de801528181610e280152610ebb0152613cdd6000f3fe60806040526004361061023f5760003560e01c806370b0f6601161012e578063c59057e4116100ab578063ea0217cf1161006f578063ea0217cf14610773578063eb9019d414610793578063ece40cc1146107b3578063f8ce560a146107d3578063fc0c546a146107f357600080fd5b8063c59057e41461069a578063d07f91e9146106ba578063d33219b4146106da578063dd4e2ba5146106f9578063deaaa7cc1461073f57600080fd5b8063a890c910116100f2578063a890c91014610605578063ab58fb8e14610625578063b58131b014610645578063c01f9e371461065a578063c28bc2fa1461067a57600080fd5b806370b0f6601461057b5780637b3c71d31461059b5780637d5e81e2146105bb57806397c3d334146105db578063a7713a70146105ef57600080fd5b80633932abb1116101bc57806352d1902d1161018057806352d1902d146104a6578063544ffc9c146104bb57806354fd4d5014610511578063567813881461053b57806361f6cc8b1461055b57600080fd5b80633932abb1146103e65780633bccf4fd146103fb5780633e4f49e61461041b57806343859632146104485780634f1ef2861461049357600080fd5b8063160cbed711610203578063160cbed71461033a5780632656227d1461035a5780632d63f6931461036d57806332b8113e1461038d5780633659cfe6146103c657600080fd5b806301ffc9a71461026757806302a251a31461029c57806306f3f9e6146102bf57806306fdde03146102df57806313007d551461030157600080fd5b36610262573061024d610814565b6001600160a01b03161461026057600080fd5b005b600080fd5b34801561027357600080fd5b50610287610282366004612f0a565b61082e565b60405190151581526020015b60405180910390f35b3480156102a857600080fd5b506102b1610859565b604051908152602001610293565b3480156102cb57600080fd5b506102606102da366004612f34565b610865565b3480156102eb57600080fd5b506102f46108b2565b6040516102939190612fa5565b34801561030d57600080fd5b5061028e54610322906001600160a01b031681565b6040516001600160a01b039091168152602001610293565b34801561034657600080fd5b506102b16103553660046131f3565b610944565b6102b16103683660046131f3565b610b48565b34801561037957600080fd5b506102b1610388366004612f34565b610c20565b34801561039957600080fd5b5061028e54600160a01b90046001600160401b03166040516001600160401b039091168152602001610293565b3480156103d257600080fd5b506102606103e1366004613282565b610c57565b3480156103f257600080fd5b506102b1610d33565b34801561040757600080fd5b506102b16104163660046132b5565b610d3f565b34801561042757600080fd5b5061043b610436366004612f34565b610dd3565b6040516102939190613319565b34801561045457600080fd5b50610287610463366004613341565b6000828152610161602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b6102606104a1366004613371565b610dde565b3480156104b257600080fd5b506102b1610eae565b3480156104c757600080fd5b506104f66104d6366004612f34565b600090815261016160205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610293565b34801561051d57600080fd5b506040805180820190915260018152603160f81b60208201526102f4565b34801561054757600080fd5b506102b16105563660046133c0565b610f61565b34801561056757600080fd5b50610260610576366004613403565b610f8a565b34801561058757600080fd5b50610260610596366004612f34565b611095565b3480156105a757600080fd5b506102b16105b63660046134f9565b6110d6565b3480156105c757600080fd5b506102b16105d6366004613552565b611128565b3480156105e757600080fd5b5060646102b1565b3480156105fb57600080fd5b506101c6546102b1565b34801561061157600080fd5b50610260610620366004613282565b61113f565b34801561063157600080fd5b506102b1610640366004612f34565b611180565b34801561065157600080fd5b506102b161121d565b34801561066657600080fd5b506102b1610675366004612f34565b611229565b34801561068657600080fd5b506102606106953660046135fe565b611234565b3480156106a657600080fd5b506102b16106b53660046131f3565b6112b5565b3480156106c657600080fd5b506102606106d5366004613641565b6112ef565b3480156106e657600080fd5b506101f8546001600160a01b0316610322565b34801561070557600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102f4565b34801561074b57600080fd5b506102b17f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561077f57600080fd5b5061026061078e366004612f34565b611330565b34801561079f57600080fd5b506102b16107ae36600461365c565b611371565b3480156107bf57600080fd5b506102606107ce366004612f34565b61137d565b3480156107df57600080fd5b506102b16107ee366004612f34565b6113be565b3480156107ff57600080fd5b5061019354610322906001600160a01b031681565b60006108296101f8546001600160a01b031690565b905090565b60006001600160e01b03198216631fedc7b160e21b14806108535750610853826113c9565b92915050565b60006108296101305490565b61086d610814565b6001600160a01b0316336001600160a01b0316146108a65760405162461bcd60e51b815260040161089d90613688565b60405180910390fd5b6108af816113fe565b50565b606060fd80546108c1906136bf565b80601f01602080910402602001604051908101604052809291908181526020018280546108ed906136bf565b801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050905090565b600080610953868686866112b5565b9050600461096082610dd3565b600781111561097157610971613303565b1461098e5760405162461bcd60e51b815260040161089d906136f9565b6101f8546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd919061373a565b6101f85460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610a38908a908a908a906000908b9060040161381c565b602060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a79919061373a565b60008381526101f96020526040808220929092556101f85491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610ac6918b918b918b91908b90899060040161386a565b600060405180830381600087803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610b2691906138d8565b6040805192835260208301919091520160405180910390a15095945050505050565b600080610b57868686866112b5565b90506000610b6482610dd3565b90506004816007811115610b7a57610b7a613303565b1480610b9757506005816007811115610b9557610b95613303565b145b610bb35760405162461bcd60e51b815260040161089d906136f9565b600082815260fe602052604090819020600201805460ff19166001179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90610c019084815260200190565b60405180910390a1610c1682888888886114c7565b5095945050505050565b600081815260fe602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c9f5760405162461bcd60e51b815260040161089d906138f0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ce8600080516020613c38833981519152546001600160a01b031690565b6001600160a01b031614610d0e5760405162461bcd60e51b815260040161089d9061393c565b610d17816114d4565b604080516000808252602082019092526108af91839190611579565b600061082961012f5490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610dab90610da390608001604051602081830303815290604052805190602001206116e9565b868686611737565b9050610dc887828860405180602001604052806000815250611755565b979650505050505050565b600061085382611763565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e265760405162461bcd60e51b815260040161089d906138f0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e6f600080516020613c38833981519152546001600160a01b031690565b6001600160a01b031614610e955760405162461bcd60e51b815260040161089d9061393c565b610e9e826114d4565b610eaa82826001611579565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f4e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161089d565b50600080516020613c3883398151915290565b600080339050610f8284828560405180602001604052806000815250611755565b949350505050565b600054610100900460ff16610fa55760005460ff1615610fa9565b303b155b61100c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161089d565b600054610100900460ff1615801561102e576000805461ffff19166101011790555b6110378a6118b0565b611042868686611907565b61104a611939565b61105389611962565b61105c83611992565b611065886119c2565b61106e826119f2565b61107787611a3d565b8015611089576000805461ff00191690555b50505050505050505050565b61109d610814565b6001600160a01b0316336001600160a01b0316146110cd5760405162461bcd60e51b815260040161089d90613688565b6108af81611a6d565b60008033905061111e86828787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175592505050565b9695505050505050565b600061113685858585611ab0565b95945050505050565b611147610814565b6001600160a01b0316336001600160a01b0316146111775760405162461bcd60e51b815260040161089d90613688565b6108af81611d6a565b6101f85460008281526101f9602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156111df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611203919061373a565b9050806001146112135780611216565b60005b9392505050565b60006108296101315490565b600061085382611dd5565b61123c610814565b6001600160a01b0316336001600160a01b03161461126c5760405162461bcd60e51b815260040161089d90613688565b6112ae8483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250611e12915050565b5050505050565b6000848484846040516020016112ce9493929190613988565b60408051601f19818403018152919052805160209091012095945050505050565b6112f7610814565b6001600160a01b0316336001600160a01b0316146113275760405162461bcd60e51b815260040161089d90613688565b6108af81611e38565b611338610814565b6001600160a01b0316336001600160a01b0316146113685760405162461bcd60e51b815260040161089d90613688565b6108af81611eb5565b60006112168383611f58565b611385610814565b6001600160a01b0316336001600160a01b0316146113b55760405162461bcd60e51b815260040161089d90613688565b6108af81611fcf565b600061085382612012565b60006001600160e01b031982166313007d5560e01b148061085357506301ffc9a760e01b6001600160e01b0319831614610853565b60648111156114815760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40161089d565b6101c680549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b6112ae858585858561209c565b61028e546040516001623b410b60e21b031981523360048201523060248201526000356001600160e01b03191660448201526001600160a01b039091169063ff12fbd490606401602060405180830381865afa158015611538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155c91906139d3565b6108af5760405163ea8e4eb560e01b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115b1576115ac83612105565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561160b575060408051601f3d908101601f191682019092526116089181019061373a565b60015b61166e5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161089d565b600080516020613c3883398151915281146116dd5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161089d565b506115ac8383836121a1565b60006108536116f66121cc565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061174887878787612247565b91509150610c1681612334565b6000611136858585856124ea565b60008061176f836125d7565b9050600481600781111561178557611785613303565b146117905792915050565b60008381526101f96020526040902054806117ac575092915050565b6101f854604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa1580156117f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181a91906139d3565b15611829575060079392505050565b6101f854604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189791906139d3565b156118a6575060059392505050565b5060029392505050565b600054610100900460ff166118d75760405162461bcd60e51b815260040161089d906139f5565b6118fe816118f96040805180820190915260018152603160f81b602082015290565b6126e7565b6108af81612728565b600054610100900460ff1661192e5760405162461bcd60e51b815260040161089d906139f5565b6115ac838383612762565b600054610100900460ff166119605760405162461bcd60e51b815260040161089d906139f5565b565b600054610100900460ff166119895760405162461bcd60e51b815260040161089d906139f5565b6108af816127a4565b600054610100900460ff166119b95760405162461bcd60e51b815260040161089d906139f5565b6108af816127ee565b600054610100900460ff166119e95760405162461bcd60e51b815260040161089d906139f5565b6108af81612815565b600054610100900460ff16611a195760405162461bcd60e51b815260040161089d906139f5565b61028e80546001600160a01b0319166001600160a01b0383161790556108af611939565b600054610100900460ff16611a645760405162461bcd60e51b815260040161089d906139f5565b6108af8161283c565b61012f5460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a161012f55565b6000611aba61121d565b611ac9336107ae600143613a40565b1015611b495760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a40161089d565b6000611b5e86868686805190602001206112b5565b90508451865114611b815760405162461bcd60e51b815260040161089d90613a57565b8351865114611ba25760405162461bcd60e51b815260040161089d90613a57565b6000865111611bf35760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c0000000000000000604482015260640161089d565b600081815260fe6020908152604091829020825191820190925281546001600160401b03169081905215611c735760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b606482015260840161089d565b6000611c85611c80610d33565b612863565b611c8e43612863565b611c989190613a98565b90506000611ca7611c80610859565b611cb19083613a98565b9050611cbd83836128cf565b611cca60018401826128cf565b7f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115611d0857611d08612fb8565b604051908082528060200260200182016040528015611d3b57816020015b6060815260200190600190039081611d265790505b508c88888e604051611d5599989796959493929190613ac3565b60405180910390a15091979650505050505050565b6101f854604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a16101f880546001600160a01b0319166001600160a01b0392909216919091179055565b6000610853611de3836128ed565b600084815261028f6020908152604091829020825191820190925290546001600160401b03169081905261291c565b6060610f82848484604051806060016040528060298152602001613c5860299139612933565b61028e54604080516001600160401b03600160a01b9093048316815291831660208301527f7ca4ac117ed3cdce75c1161d8207c440389b1a15d69d096831664657c07dafc2910160405180910390a161028e80546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b60008111611f155760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b606482015260840161089d565b6101305460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a161013055565b61019354604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000921690633a46b1a890604401602060405180830381865afa158015611fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611216919061373a565b6101315460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a161013155565b600060646101c65461019354604051632394e7a360e21b8152600481018690526001600160a01b0390911690638e539e8c90602401602060405180830381865afa158015612064573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612088919061373a565b6120929190613bb2565b6108539190613bd1565b6101f85460405163e38335e560e01b81526001600160a01b039091169063e38335e59034906120d890889088908890600090899060040161381c565b6000604051808303818588803b1580156120f157600080fd5b505af1158015611089573d6000803e3d6000fd5b6001600160a01b0381163b6121725760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161089d565b600080516020613c3883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6121aa83612a59565b6000825111806121b75750805b156115ac576121c68383612a99565b50505050565b60006108297f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6121fb60655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561227e575060009050600361232b565b8460ff16601b1415801561229657508460ff16601c14155b156122a7575060009050600461232b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156122fb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123245760006001925092505061232b565b9150600090505b94509492505050565b600081600481111561234857612348613303565b036123505750565b600181600481111561236457612364613303565b036123b15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161089d565b60028160048111156123c5576123c5613303565b036124125760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161089d565b600381600481111561242657612426613303565b0361247e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161089d565b600481600481111561249257612492613303565b036108af5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161089d565b6000806124f986868686612b84565b600087815261028f6020908152604091829020825191820190925281546001600160401b03169081905291925090158015612538575061253887612c8e565b15610c165761028e54600090600160a01b90046001600160401b031661255d43612863565b6125679190613a98565b905061257288611229565b816001600160401b031611156125c1576040516001600160401b038216815288907f541f725fb9f7c98a30cc9c0ff32fbb14358cd7159c847a3aa20a2bdc442ba5119060200160405180910390a25b6125cb82826128cf565b50509050949350505050565b600081815260fe60205260408120600281015460ff16156125fb5750600792915050565b6002810154610100900460ff16156126165750600292915050565b600061262184610c20565b9050806000036126735760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964000000604482015260640161089d565b438110612684575060009392505050565b600061268f85611229565b90504381106126a357506001949350505050565b6126ac85612c8e565b80156126cc57506000858152610161602052604090208054600190910154115b156126dc57506004949350505050565b506003949350505050565b600054610100900460ff1661270e5760405162461bcd60e51b815260040161089d906139f5565b815160209283012081519190920120606591909155606655565b600054610100900460ff1661274f5760405162461bcd60e51b815260040161089d906139f5565b8051610eaa9060fd906020840190612e7a565b600054610100900460ff166127895760405162461bcd60e51b815260040161089d906139f5565b61279283611a6d565b61279b82611eb5565b6115ac81611fcf565b600054610100900460ff166127cb5760405162461bcd60e51b815260040161089d906139f5565b61019380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166108a65760405162461bcd60e51b815260040161089d906139f5565b600054610100900460ff166111775760405162461bcd60e51b815260040161089d906139f5565b600054610100900460ff166113275760405162461bcd60e51b815260040161089d906139f5565b60006001600160401b038211156128cb5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161089d565b5090565b815467ffffffffffffffff19166001600160401b0391909116179055565b600081815260fe602090815260408083208151928301909152600101546001600160401b031690819052610c48565b60008183101561292c5781611216565b5090919050565b6060824710156129945760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161089d565b6001600160a01b0385163b6129eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161089d565b600080866001600160a01b03168587604051612a079190613bf3565b60006040518083038185875af1925050503d8060008114612a44576040519150601f19603f3d011682016040523d82523d6000602084013e612a49565b606091505b5091509150610dc8828286612cc6565b612a6281612105565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612b015760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161089d565b600080846001600160a01b031684604051612b1c9190613bf3565b600060405180830381855af49150503d8060008114612b57576040519150601f19603f3d011682016040523d82523d6000602084013e612b5c565b606091505b50915091506111368282604051806060016040528060278152602001613c8160279139612cc6565b600084815260fe602052604081206001612b9d87610dd3565b6007811115612bae57612bae613303565b14612c075760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b606482015260840161089d565b604080516020810190915281546001600160401b031690819052600090612c2f908790611371565b9050612c3d87878784612cff565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051612c7c9493929190613c0f565b60405180910390a29695505050505050565b60008181526101616020526040812060028101546001820154612cb191906138d8565b612cbd6107ee85610c20565b11159392505050565b60608315612cd5575081611216565b825115612ce55782518084602001fd5b8160405162461bcd60e51b815260040161089d9190612fa5565b6000848152610161602090815260408083206001600160a01b0387168452600381019092529091205460ff1615612d885760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b606482015260840161089d565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316612dd45781816000016000828254612dc991906138d8565b909155506112ae9050565b60001960ff841601612df45781816001016000828254612dc991906138d8565b60011960ff841601612e145781816002016000828254612dc991906138d8565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b606482015260840161089d565b828054612e86906136bf565b90600052602060002090601f016020900481019282612ea85760008555612eee565b82601f10612ec157805160ff1916838001178555612eee565b82800160010185558215612eee579182015b82811115612eee578251825591602001919060010190612ed3565b506128cb9291505b808211156128cb5760008155600101612ef6565b600060208284031215612f1c57600080fd5b81356001600160e01b03198116811461121657600080fd5b600060208284031215612f4657600080fd5b5035919050565b60005b83811015612f68578181015183820152602001612f50565b838111156121c65750506000910152565b60008151808452612f91816020860160208601612f4d565b601f01601f19169290920160200192915050565b6020815260006112166020830184612f79565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612ff657612ff6612fb8565b604052919050565b60006001600160401b0382111561301757613017612fb8565b5060051b60200190565b6001600160a01b03811681146108af57600080fd5b600082601f83011261304757600080fd5b8135602061305c61305783612ffe565b612fce565b82815260059290921b8401810191818101908684111561307b57600080fd5b8286015b8481101561309f57803561309281613021565b835291830191830161307f565b509695505050505050565b600082601f8301126130bb57600080fd5b813560206130cb61305783612ffe565b82815260059290921b840181019181810190868411156130ea57600080fd5b8286015b8481101561309f57803583529183019183016130ee565b600082601f83011261311657600080fd5b81356001600160401b0381111561312f5761312f612fb8565b613142601f8201601f1916602001612fce565b81815284602083860101111561315757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261318557600080fd5b8135602061319561305783612ffe565b82815260059290921b840181019181810190868411156131b457600080fd5b8286015b8481101561309f5780356001600160401b038111156131d75760008081fd5b6131e58986838b0101613105565b8452509183019183016131b8565b6000806000806080858703121561320957600080fd5b84356001600160401b038082111561322057600080fd5b61322c88838901613036565b9550602087013591508082111561324257600080fd5b61324e888389016130aa565b9450604087013591508082111561326457600080fd5b5061327187828801613174565b949793965093946060013593505050565b60006020828403121561329457600080fd5b813561121681613021565b803560ff811681146132b057600080fd5b919050565b600080600080600060a086880312156132cd57600080fd5b853594506132dd6020870161329f565b93506132eb6040870161329f565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061333b57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561335457600080fd5b82359150602083013561336681613021565b809150509250929050565b6000806040838503121561338457600080fd5b823561338f81613021565b915060208301356001600160401b038111156133aa57600080fd5b6133b685828601613105565b9150509250929050565b600080604083850312156133d357600080fd5b823591506133e36020840161329f565b90509250929050565b80356001600160401b03811681146132b057600080fd5b60008060008060008060008060006101208a8c03121561342257600080fd5b89356001600160401b0381111561343857600080fd5b6134448c828d01613105565b99505060208a013561345581613021565b975060408a013561346581613021565b965061347360608b016133ec565b955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a01356134a081613021565b809150509295985092959850929598565b60008083601f8401126134c357600080fd5b5081356001600160401b038111156134da57600080fd5b6020830191508360208285010111156134f257600080fd5b9250929050565b6000806000806060858703121561350f57600080fd5b8435935061351f6020860161329f565b925060408501356001600160401b0381111561353a57600080fd5b613546878288016134b1565b95989497509550505050565b6000806000806080858703121561356857600080fd5b84356001600160401b038082111561357f57600080fd5b61358b88838901613036565b955060208701359150808211156135a157600080fd5b6135ad888389016130aa565b945060408701359150808211156135c357600080fd5b6135cf88838901613174565b935060608701359150808211156135e557600080fd5b506135f287828801613105565b91505092959194509250565b6000806000806060858703121561361457600080fd5b843561361f81613021565b93506020850135925060408501356001600160401b0381111561353a57600080fd5b60006020828403121561365357600080fd5b611216826133ec565b6000806040838503121561366f57600080fd5b823561367a81613021565b946020939093013593505050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c908216806136d357607f821691505b6020821081036136f357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b60006020828403121561374c57600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561378c5781516001600160a01b031687529582019590820190600101613767565b509495945050505050565b600081518084526020808501945080840160005b8381101561378c578151875295820195908201906001016137ab565b600081518084526020808501808196508360051b8101915082860160005b8581101561380f5782840389526137fd848351612f79565b988501989350908401906001016137e5565b5091979650505050505050565b60a08152600061382f60a0830188613753565b82810360208401526138418188613797565b9050828103604084015261385581876137c7565b60608401959095525050608001529392505050565b60c08152600061387d60c0830189613753565b828103602084015261388f8189613797565b905082810360408401526138a381886137c7565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156138eb576138eb6138c2565b500190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60808152600061399b6080830187613753565b82810360208401526139ad8187613797565b905082810360408401526139c181866137c7565b91505082606083015295945050505050565b6000602082840312156139e557600080fd5b8151801515811461121657600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082821015613a5257613a526138c2565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115613aba57613aba6138c2565b01949350505050565b60006101208b8352602060018060a01b038c1681850152816040850152613aec8285018c613753565b91508382036060850152613b00828b613797565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015613b5157601f19878403018552613b3f838351612f79565b94860194925090850190600101613b23565b505086810360a0880152613b65818c6137c7565b945050505050613b8060c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152613ba28185612f79565b9c9b505050505050505050505050565b6000816000190483118215151615613bcc57613bcc6138c2565b500290565b600082613bee57634e487b7160e01b600052601260045260246000fd5b500490565b60008251613c05818460208701612f4d565b9190910192915050565b84815260ff8416602082015282604082015260806060820152600061111e6080830184612f7956fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220df99af904207ab224b8410469fda24c91c4e2440e78fcf0f0968e0823b2aed2d64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061023f5760003560e01c806370b0f6601161012e578063c59057e4116100ab578063ea0217cf1161006f578063ea0217cf14610773578063eb9019d414610793578063ece40cc1146107b3578063f8ce560a146107d3578063fc0c546a146107f357600080fd5b8063c59057e41461069a578063d07f91e9146106ba578063d33219b4146106da578063dd4e2ba5146106f9578063deaaa7cc1461073f57600080fd5b8063a890c910116100f2578063a890c91014610605578063ab58fb8e14610625578063b58131b014610645578063c01f9e371461065a578063c28bc2fa1461067a57600080fd5b806370b0f6601461057b5780637b3c71d31461059b5780637d5e81e2146105bb57806397c3d334146105db578063a7713a70146105ef57600080fd5b80633932abb1116101bc57806352d1902d1161018057806352d1902d146104a6578063544ffc9c146104bb57806354fd4d5014610511578063567813881461053b57806361f6cc8b1461055b57600080fd5b80633932abb1146103e65780633bccf4fd146103fb5780633e4f49e61461041b57806343859632146104485780634f1ef2861461049357600080fd5b8063160cbed711610203578063160cbed71461033a5780632656227d1461035a5780632d63f6931461036d57806332b8113e1461038d5780633659cfe6146103c657600080fd5b806301ffc9a71461026757806302a251a31461029c57806306f3f9e6146102bf57806306fdde03146102df57806313007d551461030157600080fd5b36610262573061024d610814565b6001600160a01b03161461026057600080fd5b005b600080fd5b34801561027357600080fd5b50610287610282366004612f0a565b61082e565b60405190151581526020015b60405180910390f35b3480156102a857600080fd5b506102b1610859565b604051908152602001610293565b3480156102cb57600080fd5b506102606102da366004612f34565b610865565b3480156102eb57600080fd5b506102f46108b2565b6040516102939190612fa5565b34801561030d57600080fd5b5061028e54610322906001600160a01b031681565b6040516001600160a01b039091168152602001610293565b34801561034657600080fd5b506102b16103553660046131f3565b610944565b6102b16103683660046131f3565b610b48565b34801561037957600080fd5b506102b1610388366004612f34565b610c20565b34801561039957600080fd5b5061028e54600160a01b90046001600160401b03166040516001600160401b039091168152602001610293565b3480156103d257600080fd5b506102606103e1366004613282565b610c57565b3480156103f257600080fd5b506102b1610d33565b34801561040757600080fd5b506102b16104163660046132b5565b610d3f565b34801561042757600080fd5b5061043b610436366004612f34565b610dd3565b6040516102939190613319565b34801561045457600080fd5b50610287610463366004613341565b6000828152610161602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b6102606104a1366004613371565b610dde565b3480156104b257600080fd5b506102b1610eae565b3480156104c757600080fd5b506104f66104d6366004612f34565b600090815261016160205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610293565b34801561051d57600080fd5b506040805180820190915260018152603160f81b60208201526102f4565b34801561054757600080fd5b506102b16105563660046133c0565b610f61565b34801561056757600080fd5b50610260610576366004613403565b610f8a565b34801561058757600080fd5b50610260610596366004612f34565b611095565b3480156105a757600080fd5b506102b16105b63660046134f9565b6110d6565b3480156105c757600080fd5b506102b16105d6366004613552565b611128565b3480156105e757600080fd5b5060646102b1565b3480156105fb57600080fd5b506101c6546102b1565b34801561061157600080fd5b50610260610620366004613282565b61113f565b34801561063157600080fd5b506102b1610640366004612f34565b611180565b34801561065157600080fd5b506102b161121d565b34801561066657600080fd5b506102b1610675366004612f34565b611229565b34801561068657600080fd5b506102606106953660046135fe565b611234565b3480156106a657600080fd5b506102b16106b53660046131f3565b6112b5565b3480156106c657600080fd5b506102606106d5366004613641565b6112ef565b3480156106e657600080fd5b506101f8546001600160a01b0316610322565b34801561070557600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102f4565b34801561074b57600080fd5b506102b17f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561077f57600080fd5b5061026061078e366004612f34565b611330565b34801561079f57600080fd5b506102b16107ae36600461365c565b611371565b3480156107bf57600080fd5b506102606107ce366004612f34565b61137d565b3480156107df57600080fd5b506102b16107ee366004612f34565b6113be565b3480156107ff57600080fd5b5061019354610322906001600160a01b031681565b60006108296101f8546001600160a01b031690565b905090565b60006001600160e01b03198216631fedc7b160e21b14806108535750610853826113c9565b92915050565b60006108296101305490565b61086d610814565b6001600160a01b0316336001600160a01b0316146108a65760405162461bcd60e51b815260040161089d90613688565b60405180910390fd5b6108af816113fe565b50565b606060fd80546108c1906136bf565b80601f01602080910402602001604051908101604052809291908181526020018280546108ed906136bf565b801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050905090565b600080610953868686866112b5565b9050600461096082610dd3565b600781111561097157610971613303565b1461098e5760405162461bcd60e51b815260040161089d906136f9565b6101f8546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd919061373a565b6101f85460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610a38908a908a908a906000908b9060040161381c565b602060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a79919061373a565b60008381526101f96020526040808220929092556101f85491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610ac6918b918b918b91908b90899060040161386a565b600060405180830381600087803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610b2691906138d8565b6040805192835260208301919091520160405180910390a15095945050505050565b600080610b57868686866112b5565b90506000610b6482610dd3565b90506004816007811115610b7a57610b7a613303565b1480610b9757506005816007811115610b9557610b95613303565b145b610bb35760405162461bcd60e51b815260040161089d906136f9565b600082815260fe602052604090819020600201805460ff19166001179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90610c019084815260200190565b60405180910390a1610c1682888888886114c7565b5095945050505050565b600081815260fe602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c9f5760405162461bcd60e51b815260040161089d906138f0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ce8600080516020613c38833981519152546001600160a01b031690565b6001600160a01b031614610d0e5760405162461bcd60e51b815260040161089d9061393c565b610d17816114d4565b604080516000808252602082019092526108af91839190611579565b600061082961012f5490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610dab90610da390608001604051602081830303815290604052805190602001206116e9565b868686611737565b9050610dc887828860405180602001604052806000815250611755565b979650505050505050565b600061085382611763565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e265760405162461bcd60e51b815260040161089d906138f0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e6f600080516020613c38833981519152546001600160a01b031690565b6001600160a01b031614610e955760405162461bcd60e51b815260040161089d9061393c565b610e9e826114d4565b610eaa82826001611579565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f4e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161089d565b50600080516020613c3883398151915290565b600080339050610f8284828560405180602001604052806000815250611755565b949350505050565b600054610100900460ff16610fa55760005460ff1615610fa9565b303b155b61100c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161089d565b600054610100900460ff1615801561102e576000805461ffff19166101011790555b6110378a6118b0565b611042868686611907565b61104a611939565b61105389611962565b61105c83611992565b611065886119c2565b61106e826119f2565b61107787611a3d565b8015611089576000805461ff00191690555b50505050505050505050565b61109d610814565b6001600160a01b0316336001600160a01b0316146110cd5760405162461bcd60e51b815260040161089d90613688565b6108af81611a6d565b60008033905061111e86828787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175592505050565b9695505050505050565b600061113685858585611ab0565b95945050505050565b611147610814565b6001600160a01b0316336001600160a01b0316146111775760405162461bcd60e51b815260040161089d90613688565b6108af81611d6a565b6101f85460008281526101f9602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156111df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611203919061373a565b9050806001146112135780611216565b60005b9392505050565b60006108296101315490565b600061085382611dd5565b61123c610814565b6001600160a01b0316336001600160a01b03161461126c5760405162461bcd60e51b815260040161089d90613688565b6112ae8483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250611e12915050565b5050505050565b6000848484846040516020016112ce9493929190613988565b60408051601f19818403018152919052805160209091012095945050505050565b6112f7610814565b6001600160a01b0316336001600160a01b0316146113275760405162461bcd60e51b815260040161089d90613688565b6108af81611e38565b611338610814565b6001600160a01b0316336001600160a01b0316146113685760405162461bcd60e51b815260040161089d90613688565b6108af81611eb5565b60006112168383611f58565b611385610814565b6001600160a01b0316336001600160a01b0316146113b55760405162461bcd60e51b815260040161089d90613688565b6108af81611fcf565b600061085382612012565b60006001600160e01b031982166313007d5560e01b148061085357506301ffc9a760e01b6001600160e01b0319831614610853565b60648111156114815760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40161089d565b6101c680549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b6112ae858585858561209c565b61028e546040516001623b410b60e21b031981523360048201523060248201526000356001600160e01b03191660448201526001600160a01b039091169063ff12fbd490606401602060405180830381865afa158015611538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155c91906139d3565b6108af5760405163ea8e4eb560e01b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115b1576115ac83612105565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561160b575060408051601f3d908101601f191682019092526116089181019061373a565b60015b61166e5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161089d565b600080516020613c3883398151915281146116dd5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161089d565b506115ac8383836121a1565b60006108536116f66121cc565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061174887878787612247565b91509150610c1681612334565b6000611136858585856124ea565b60008061176f836125d7565b9050600481600781111561178557611785613303565b146117905792915050565b60008381526101f96020526040902054806117ac575092915050565b6101f854604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa1580156117f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181a91906139d3565b15611829575060079392505050565b6101f854604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189791906139d3565b156118a6575060059392505050565b5060029392505050565b600054610100900460ff166118d75760405162461bcd60e51b815260040161089d906139f5565b6118fe816118f96040805180820190915260018152603160f81b602082015290565b6126e7565b6108af81612728565b600054610100900460ff1661192e5760405162461bcd60e51b815260040161089d906139f5565b6115ac838383612762565b600054610100900460ff166119605760405162461bcd60e51b815260040161089d906139f5565b565b600054610100900460ff166119895760405162461bcd60e51b815260040161089d906139f5565b6108af816127a4565b600054610100900460ff166119b95760405162461bcd60e51b815260040161089d906139f5565b6108af816127ee565b600054610100900460ff166119e95760405162461bcd60e51b815260040161089d906139f5565b6108af81612815565b600054610100900460ff16611a195760405162461bcd60e51b815260040161089d906139f5565b61028e80546001600160a01b0319166001600160a01b0383161790556108af611939565b600054610100900460ff16611a645760405162461bcd60e51b815260040161089d906139f5565b6108af8161283c565b61012f5460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a161012f55565b6000611aba61121d565b611ac9336107ae600143613a40565b1015611b495760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a40161089d565b6000611b5e86868686805190602001206112b5565b90508451865114611b815760405162461bcd60e51b815260040161089d90613a57565b8351865114611ba25760405162461bcd60e51b815260040161089d90613a57565b6000865111611bf35760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c0000000000000000604482015260640161089d565b600081815260fe6020908152604091829020825191820190925281546001600160401b03169081905215611c735760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b606482015260840161089d565b6000611c85611c80610d33565b612863565b611c8e43612863565b611c989190613a98565b90506000611ca7611c80610859565b611cb19083613a98565b9050611cbd83836128cf565b611cca60018401826128cf565b7f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b03811115611d0857611d08612fb8565b604051908082528060200260200182016040528015611d3b57816020015b6060815260200190600190039081611d265790505b508c88888e604051611d5599989796959493929190613ac3565b60405180910390a15091979650505050505050565b6101f854604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a16101f880546001600160a01b0319166001600160a01b0392909216919091179055565b6000610853611de3836128ed565b600084815261028f6020908152604091829020825191820190925290546001600160401b03169081905261291c565b6060610f82848484604051806060016040528060298152602001613c5860299139612933565b61028e54604080516001600160401b03600160a01b9093048316815291831660208301527f7ca4ac117ed3cdce75c1161d8207c440389b1a15d69d096831664657c07dafc2910160405180910390a161028e80546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b60008111611f155760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b606482015260840161089d565b6101305460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a161013055565b61019354604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000921690633a46b1a890604401602060405180830381865afa158015611fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611216919061373a565b6101315460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a161013155565b600060646101c65461019354604051632394e7a360e21b8152600481018690526001600160a01b0390911690638e539e8c90602401602060405180830381865afa158015612064573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612088919061373a565b6120929190613bb2565b6108539190613bd1565b6101f85460405163e38335e560e01b81526001600160a01b039091169063e38335e59034906120d890889088908890600090899060040161381c565b6000604051808303818588803b1580156120f157600080fd5b505af1158015611089573d6000803e3d6000fd5b6001600160a01b0381163b6121725760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161089d565b600080516020613c3883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6121aa83612a59565b6000825111806121b75750805b156115ac576121c68383612a99565b50505050565b60006108297f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6121fb60655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561227e575060009050600361232b565b8460ff16601b1415801561229657508460ff16601c14155b156122a7575060009050600461232b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156122fb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123245760006001925092505061232b565b9150600090505b94509492505050565b600081600481111561234857612348613303565b036123505750565b600181600481111561236457612364613303565b036123b15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161089d565b60028160048111156123c5576123c5613303565b036124125760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161089d565b600381600481111561242657612426613303565b0361247e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161089d565b600481600481111561249257612492613303565b036108af5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161089d565b6000806124f986868686612b84565b600087815261028f6020908152604091829020825191820190925281546001600160401b03169081905291925090158015612538575061253887612c8e565b15610c165761028e54600090600160a01b90046001600160401b031661255d43612863565b6125679190613a98565b905061257288611229565b816001600160401b031611156125c1576040516001600160401b038216815288907f541f725fb9f7c98a30cc9c0ff32fbb14358cd7159c847a3aa20a2bdc442ba5119060200160405180910390a25b6125cb82826128cf565b50509050949350505050565b600081815260fe60205260408120600281015460ff16156125fb5750600792915050565b6002810154610100900460ff16156126165750600292915050565b600061262184610c20565b9050806000036126735760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964000000604482015260640161089d565b438110612684575060009392505050565b600061268f85611229565b90504381106126a357506001949350505050565b6126ac85612c8e565b80156126cc57506000858152610161602052604090208054600190910154115b156126dc57506004949350505050565b506003949350505050565b600054610100900460ff1661270e5760405162461bcd60e51b815260040161089d906139f5565b815160209283012081519190920120606591909155606655565b600054610100900460ff1661274f5760405162461bcd60e51b815260040161089d906139f5565b8051610eaa9060fd906020840190612e7a565b600054610100900460ff166127895760405162461bcd60e51b815260040161089d906139f5565b61279283611a6d565b61279b82611eb5565b6115ac81611fcf565b600054610100900460ff166127cb5760405162461bcd60e51b815260040161089d906139f5565b61019380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166108a65760405162461bcd60e51b815260040161089d906139f5565b600054610100900460ff166111775760405162461bcd60e51b815260040161089d906139f5565b600054610100900460ff166113275760405162461bcd60e51b815260040161089d906139f5565b60006001600160401b038211156128cb5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161089d565b5090565b815467ffffffffffffffff19166001600160401b0391909116179055565b600081815260fe602090815260408083208151928301909152600101546001600160401b031690819052610c48565b60008183101561292c5781611216565b5090919050565b6060824710156129945760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161089d565b6001600160a01b0385163b6129eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161089d565b600080866001600160a01b03168587604051612a079190613bf3565b60006040518083038185875af1925050503d8060008114612a44576040519150601f19603f3d011682016040523d82523d6000602084013e612a49565b606091505b5091509150610dc8828286612cc6565b612a6281612105565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612b015760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161089d565b600080846001600160a01b031684604051612b1c9190613bf3565b600060405180830381855af49150503d8060008114612b57576040519150601f19603f3d011682016040523d82523d6000602084013e612b5c565b606091505b50915091506111368282604051806060016040528060278152602001613c8160279139612cc6565b600084815260fe602052604081206001612b9d87610dd3565b6007811115612bae57612bae613303565b14612c075760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b606482015260840161089d565b604080516020810190915281546001600160401b031690819052600090612c2f908790611371565b9050612c3d87878784612cff565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051612c7c9493929190613c0f565b60405180910390a29695505050505050565b60008181526101616020526040812060028101546001820154612cb191906138d8565b612cbd6107ee85610c20565b11159392505050565b60608315612cd5575081611216565b825115612ce55782518084602001fd5b8160405162461bcd60e51b815260040161089d9190612fa5565b6000848152610161602090815260408083206001600160a01b0387168452600381019092529091205460ff1615612d885760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b606482015260840161089d565b6001600160a01b03841660009081526003820160205260409020805460ff1916600117905560ff8316612dd45781816000016000828254612dc991906138d8565b909155506112ae9050565b60001960ff841601612df45781816001016000828254612dc991906138d8565b60011960ff841601612e145781816002016000828254612dc991906138d8565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b606482015260840161089d565b828054612e86906136bf565b90600052602060002090601f016020900481019282612ea85760008555612eee565b82601f10612ec157805160ff1916838001178555612eee565b82800160010185558215612eee579182015b82811115612eee578251825591602001919060010190612ed3565b506128cb9291505b808211156128cb5760008155600101612ef6565b600060208284031215612f1c57600080fd5b81356001600160e01b03198116811461121657600080fd5b600060208284031215612f4657600080fd5b5035919050565b60005b83811015612f68578181015183820152602001612f50565b838111156121c65750506000910152565b60008151808452612f91816020860160208601612f4d565b601f01601f19169290920160200192915050565b6020815260006112166020830184612f79565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612ff657612ff6612fb8565b604052919050565b60006001600160401b0382111561301757613017612fb8565b5060051b60200190565b6001600160a01b03811681146108af57600080fd5b600082601f83011261304757600080fd5b8135602061305c61305783612ffe565b612fce565b82815260059290921b8401810191818101908684111561307b57600080fd5b8286015b8481101561309f57803561309281613021565b835291830191830161307f565b509695505050505050565b600082601f8301126130bb57600080fd5b813560206130cb61305783612ffe565b82815260059290921b840181019181810190868411156130ea57600080fd5b8286015b8481101561309f57803583529183019183016130ee565b600082601f83011261311657600080fd5b81356001600160401b0381111561312f5761312f612fb8565b613142601f8201601f1916602001612fce565b81815284602083860101111561315757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261318557600080fd5b8135602061319561305783612ffe565b82815260059290921b840181019181810190868411156131b457600080fd5b8286015b8481101561309f5780356001600160401b038111156131d75760008081fd5b6131e58986838b0101613105565b8452509183019183016131b8565b6000806000806080858703121561320957600080fd5b84356001600160401b038082111561322057600080fd5b61322c88838901613036565b9550602087013591508082111561324257600080fd5b61324e888389016130aa565b9450604087013591508082111561326457600080fd5b5061327187828801613174565b949793965093946060013593505050565b60006020828403121561329457600080fd5b813561121681613021565b803560ff811681146132b057600080fd5b919050565b600080600080600060a086880312156132cd57600080fd5b853594506132dd6020870161329f565b93506132eb6040870161329f565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061333b57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561335457600080fd5b82359150602083013561336681613021565b809150509250929050565b6000806040838503121561338457600080fd5b823561338f81613021565b915060208301356001600160401b038111156133aa57600080fd5b6133b685828601613105565b9150509250929050565b600080604083850312156133d357600080fd5b823591506133e36020840161329f565b90509250929050565b80356001600160401b03811681146132b057600080fd5b60008060008060008060008060006101208a8c03121561342257600080fd5b89356001600160401b0381111561343857600080fd5b6134448c828d01613105565b99505060208a013561345581613021565b975060408a013561346581613021565b965061347360608b016133ec565b955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a01356134a081613021565b809150509295985092959850929598565b60008083601f8401126134c357600080fd5b5081356001600160401b038111156134da57600080fd5b6020830191508360208285010111156134f257600080fd5b9250929050565b6000806000806060858703121561350f57600080fd5b8435935061351f6020860161329f565b925060408501356001600160401b0381111561353a57600080fd5b613546878288016134b1565b95989497509550505050565b6000806000806080858703121561356857600080fd5b84356001600160401b038082111561357f57600080fd5b61358b88838901613036565b955060208701359150808211156135a157600080fd5b6135ad888389016130aa565b945060408701359150808211156135c357600080fd5b6135cf88838901613174565b935060608701359150808211156135e557600080fd5b506135f287828801613105565b91505092959194509250565b6000806000806060858703121561361457600080fd5b843561361f81613021565b93506020850135925060408501356001600160401b0381111561353a57600080fd5b60006020828403121561365357600080fd5b611216826133ec565b6000806040838503121561366f57600080fd5b823561367a81613021565b946020939093013593505050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c908216806136d357607f821691505b6020821081036136f357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b60006020828403121561374c57600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561378c5781516001600160a01b031687529582019590820190600101613767565b509495945050505050565b600081518084526020808501945080840160005b8381101561378c578151875295820195908201906001016137ab565b600081518084526020808501808196508360051b8101915082860160005b8581101561380f5782840389526137fd848351612f79565b988501989350908401906001016137e5565b5091979650505050505050565b60a08152600061382f60a0830188613753565b82810360208401526138418188613797565b9050828103604084015261385581876137c7565b60608401959095525050608001529392505050565b60c08152600061387d60c0830189613753565b828103602084015261388f8189613797565b905082810360408401526138a381886137c7565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156138eb576138eb6138c2565b500190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60808152600061399b6080830187613753565b82810360208401526139ad8187613797565b905082810360408401526139c181866137c7565b91505082606083015295945050505050565b6000602082840312156139e557600080fd5b8151801515811461121657600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082821015613a5257613a526138c2565b500390565b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115613aba57613aba6138c2565b01949350505050565b60006101208b8352602060018060a01b038c1681850152816040850152613aec8285018c613753565b91508382036060850152613b00828b613797565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015613b5157601f19878403018552613b3f838351612f79565b94860194925090850190600101613b23565b505086810360a0880152613b65818c6137c7565b945050505050613b8060c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152613ba28185612f79565b9c9b505050505050505050505050565b6000816000190483118215151615613bcc57613bcc6138c2565b500290565b600082613bee57634e487b7160e01b600052601260045260246000fd5b500490565b60008251613c05818460208701612f4d565b9190910192915050565b84815260ff8416602082015282604082015260806060820152600061111e6080830184612f7956fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220df99af904207ab224b8410469fda24c91c4e2440e78fcf0f0968e0823b2aed2d64736f6c634300080d0033",
  "devdoc": {
    "details": "Governor Module used to implement 1 token 1 vote. This acts as an extension of the MVD and permissions are controlled by access control.Gov Module is extended by the timelock contract which creates a lockup period before execution.",
    "kind": "dev",
    "methods": {
      "COUNTING_MODE()": {
        "details": "See {IGovernor-COUNTING_MODE}."
      },
      "castVote(uint256,uint8)": {
        "details": "See {IGovernor-castVote}."
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "details": "See {IGovernor-castVoteBySig}."
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "details": "See {IGovernor-castVoteWithReason}."
      },
      "execute(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-execute}."
      },
      "getVotes(address,uint256)": {
        "details": "Voting power of an `account` at a specific `blockNumber`. Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens.",
        "params": {
          "account": "Voting weight of this Address",
          "blockNumber": "Checkpoint at this blockNumber"
        }
      },
      "hasVoted(uint256,address)": {
        "details": "See {IGovernor-hasVoted}."
      },
      "hashProposal(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."
      },
      "initialize(string,address,address,uint64,uint256,uint256,uint256,uint256,address)": {
        "details": "Configures Gov Module implementationCalled once during deployment atomically",
        "params": {
          "_accessControl": "Address of Access Control",
          "_initialProposalThreshold": "Total tokens required to submit a proposal",
          "_initialQuorumNumeratorValue": "Total votes needed to reach quorum",
          "_initialVoteExtension": "Allow users to vote if quorum attack is preformed",
          "_initialVotingDelay": "Allow users to research proposals before voting period",
          "_initialVotingPeriod": "Length of voting period (blocks)",
          "_name": "Name of the DAO",
          "_timelock": "Timelock vest proposals to allow detractors to exit system",
          "_token": "Voting token uses snapshot feature"
        }
      },
      "lateQuorumVoteExtension()": {
        "details": "Returns the current value of the vote extension parameter: the number of blocks that are required to pass from the time a proposal reaches quorum until its voting period ends."
      },
      "name()": {
        "details": "See {IGovernor-name}."
      },
      "proposalDeadline(uint256)": {
        "details": "Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote during this block.",
        "params": {
          "proposalId": "keccak256 hash of proposal params"
        }
      },
      "proposalEta(uint256)": {
        "details": "Public accessor to check the eta of a queued proposal",
        "params": {
          "proposalId": "keccak256 hash of proposal params"
        }
      },
      "proposalSnapshot(uint256)": {
        "details": "See {IGovernor-proposalSnapshot}."
      },
      "proposalThreshold()": {
        "details": "Total vote weight required to create a proposal"
      },
      "proposalVotes(uint256)": {
        "details": "Accessor to the internal vote counts."
      },
      "propose(address[],uint256[],bytes[],string)": {
        "details": "Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends {IGovernor-votingPeriod} blocks after the voting starts. Emits a {ProposalCreated} event.",
        "params": {
          "calldatas": "Function Sigs w/ Params",
          "description": "Description of proposal",
          "targets": "Contract addresses the DAO will call",
          "values": "Ether values to be sent to the target address"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "queue(address[],uint256[],bytes[],bytes32)": {
        "details": "Function to queue a proposal to the timelock.",
        "params": {
          "calldatas": "Function Sigs w/ Params ",
          "descriptionHash": "Description of proposal",
          "targets": "Contract addresses the DAO will call",
          "values": "Ether values to be sent to the target address"
        }
      },
      "quorum(uint256)": {
        "details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).",
        "params": {
          "blockNumber": "Checkpoint at this blockNumber"
        }
      },
      "quorumDenominator()": {
        "details": "Returns the quorum denominator. Defaults to 100, but may be overridden."
      },
      "quorumNumerator()": {
        "details": "Returns the current quorum numerator. See {quorumDenominator}."
      },
      "relay(address,uint256,bytes)": {
        "details": "Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant."
      },
      "setLateQuorumVoteExtension(uint64)": {
        "details": "Changes the {lateQuorumVoteExtension}. This operation can only be performed by the governance executor, generally through a governance proposal. Emits a {LateQuorumVoteExtensionSet} event."
      },
      "setProposalThreshold(uint256)": {
        "details": "Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event."
      },
      "setVotingDelay(uint256)": {
        "details": "Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event."
      },
      "setVotingPeriod(uint256)": {
        "details": "Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event."
      },
      "state(uint256)": {
        "details": "Overriden version of the {Governor-state} function with added support for the `Queued` status.",
        "params": {
          "proposalId": "keccak256 hash of proposal params"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.",
        "params": {
          "interfaceId": "An interface ID bytes4 as defined by ERC-165"
        },
        "returns": {
          "_0": "bool Indicates whether the interface is supported"
        }
      },
      "timelock()": {
        "details": "Public accessor to check the address of the timelock"
      },
      "updateQuorumNumerator(uint256)": {
        "details": "Changes the quorum numerator. Emits a {QuorumNumeratorUpdated} event. Requirements: - Must be called through a governance proposal. - New numerator must be smaller or equal to the denominator."
      },
      "updateTimelock(address)": {
        "details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled, and executed through governance proposals. CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.",
        "params": {
          "newTimelock": "Address of new Timelock Address"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "details": "See {IGovernor-version}."
      },
      "votingDelay()": {
        "details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts."
      },
      "votingPeriod()": {
        "details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getVotes(address,uint256)": {
        "notice": "module:reputation"
      },
      "proposalDeadline(uint256)": {
        "notice": "module:core"
      },
      "quorum(uint256)": {
        "notice": "module:user-config"
      },
      "votingDelay()": {
        "notice": "module:user-config"
      },
      "votingPeriod()": {
        "notice": "module:user-config"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2453,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2456,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2940,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4018,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3834,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "101",
        "type": "t_bytes32"
      },
      {
        "astId": 3836,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "102",
        "type": "t_bytes32"
      },
      {
        "astId": 3974,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1132,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12413,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 46,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_name",
        "offset": 0,
        "slot": "253",
        "type": "t_string_storage"
      },
      {
        "astId": 51,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_proposals",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint256,t_struct(ProposalCore)44_storage)"
      },
      {
        "astId": 876,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 1592,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_votingDelay",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 1594,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_votingPeriod",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 1596,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_proposalThreshold",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 1786,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 1174,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_proposalVotes",
        "offset": 0,
        "slot": "353",
        "type": "t_mapping(t_uint256,t_struct(ProposalVote)1169_storage)"
      },
      {
        "astId": 1376,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "354",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1929,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "token",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(IVotesUpgradeable)2057"
      },
      {
        "astId": 1978,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "404",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1798,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_quorumNumerator",
        "offset": 0,
        "slot": "454",
        "type": "t_uint256"
      },
      {
        "astId": 1915,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "455",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13158,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_timelock",
        "offset": 0,
        "slot": "504",
        "type": "t_contract(ITimelockUpgradeable)12791"
      },
      {
        "astId": 13162,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_timelockIds",
        "offset": 0,
        "slot": "505",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 13541,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "506",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 2435,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "554",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2655,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "604",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11810,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "accessControl",
        "offset": 0,
        "slot": "654",
        "type": "t_contract(IAccessControl)12263"
      },
      {
        "astId": 1396,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_voteExtension",
        "offset": 20,
        "slot": "654",
        "type": "t_uint64"
      },
      {
        "astId": 1401,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "_extendedDeadlines",
        "offset": 0,
        "slot": "655",
        "type": "t_mapping(t_uint256,t_struct(BlockNumber)3315_storage)"
      },
      {
        "astId": 1580,
        "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
        "label": "__gap",
        "offset": 0,
        "slot": "656",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccessControl)12263": {
        "encoding": "inplace",
        "label": "contract IAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ITimelockUpgradeable)12791": {
        "encoding": "inplace",
        "label": "contract ITimelockUpgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IVotesUpgradeable)2057": {
        "encoding": "inplace",
        "label": "contract IVotesUpgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(BlockNumber)3315_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TimersUpgradeable.BlockNumber)",
        "numberOfBytes": "32",
        "value": "t_struct(BlockNumber)3315_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalCore)44_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorUpgradeable.ProposalCore)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalCore)44_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)1169_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorCountingSimpleUpgradeable.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)1169_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BlockNumber)3315_storage": {
        "encoding": "inplace",
        "label": "struct TimersUpgradeable.BlockNumber",
        "members": [
          {
            "astId": 3314,
            "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
            "label": "_deadline",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProposalCore)44_storage": {
        "encoding": "inplace",
        "label": "struct GovernorUpgradeable.ProposalCore",
        "members": [
          {
            "astId": 36,
            "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
            "label": "voteStart",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(BlockNumber)3315_storage"
          },
          {
            "astId": 39,
            "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
            "label": "voteEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(BlockNumber)3315_storage"
          },
          {
            "astId": 41,
            "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
            "label": "executed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 43,
            "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
            "label": "canceled",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalVote)1169_storage": {
        "encoding": "inplace",
        "label": "struct GovernorCountingSimpleUpgradeable.ProposalVote",
        "members": [
          {
            "astId": 1160,
            "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
            "label": "againstVotes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1162,
            "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
            "label": "forVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1164,
            "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1168,
            "contract": "contracts/modules/Governor/GovernorModule.sol:GovernorModule",
            "label": "hasVoted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}